{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/python-tutorial.md","hash":"9fd590fc7e0ccaf9877785eeb613b036590da782","modified":1702124218501},{"_id":"source/_posts/docker-tutorial.md","hash":"ed6eba12a90271b44f67ffab4c5f7296b95cfe5f","modified":1702125403098},{"_id":"source/_posts/shell-tutorial.md","hash":"53401b80d34a2ca61a01aedb8518ca4ec1514eb9","modified":1702124240026},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1702115546015},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1702115546015},{"_id":"public/archives/index.html","hash":"7ca4346a0ef30f7cf690450654dd319e7a11c01a","modified":1702126240428},{"_id":"public/archives/2023/index.html","hash":"1399092987477f1089272fd75d977a021b736f60","modified":1702126240428},{"_id":"public/archives/2023/12/index.html","hash":"7fdfae19bc7f575e50f61f3fb47cd09ad5dc0060","modified":1702126240428},{"_id":"public/tags/python/index.html","hash":"f29219a757186b39fe6cddb9071ae1d708d205da","modified":1702126240428},{"_id":"public/tags/linux/index.html","hash":"e5fe9cd7343de38bd6f4e1d229c276e753048da0","modified":1702126240428},{"_id":"public/tags/docker/index.html","hash":"2a502e8711db2f9f8f32b0ab28facf533bb6ae00","modified":1702126240428},{"_id":"public/tags/shell/index.html","hash":"9476c505a9bcde854cb8064cb73ba8e80beadaa9","modified":1702126240428},{"_id":"public/2023/12/09/python-tutorial/index.html","hash":"a02233a7d122db4d671fa499eb01ffa66f6bdc79","modified":1702126240428},{"_id":"public/2023/12/09/shell-tutorial/index.html","hash":"31f65f1d45e28e46d37b141d3368c6362ddf69a2","modified":1702126240428},{"_id":"public/2023/12/09/docker-tutorial/index.html","hash":"1494fb4a324581447eb206e83b3a6d4d4839360c","modified":1702126240428},{"_id":"public/index.html","hash":"b6dce0f4434c1d469934a67729f78cab665a522d","modified":1702126240428},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1702126240428},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1702126240428},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1702126240428},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1702126240428},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1702126240428},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1702126240428}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"python tutorial","date":"2023-12-09T11:11:03.000Z","_content":"\n### 一、变量\n\n#### 变量的类型\n\n- 数值型\n- 布尔型\n- 字符型\n- 抽象结构（容器类+自定义class）\n\ntype(变量名)： 获取变量的类型\n\n特殊类型变量：None 表示空、假...\n\n类型转化：str(变量) 转化成字符串， int(变量) 转化成数字 \n\n```python\nname =\"liuheng\"\ntype(name)\n<class 'str'>\ntype(int(age))\n<class 'int'>\ntype(1.0)\n<class 'float'>\ntype(None)\n<class 'NoneType'>\ntype(True)\n<class 'bool'>\n```\n\n#### 变量的定义\n\n定义：变量名 = 变量值\n\n#### 数据容器\n\n数据容器(数据结构)变量：用来装一组数据的变量\n\n| 容器        | 定义        | 操作                                                         |\n| ----------- | ----------- | ------------------------------------------------------------ |\n| 元组(tuple) | names=()    | 取值：names[0]，不可修改                                     |\n| 列表(list)  | names=[]    | 取值：names[0]<br />追加：names.append(\"clr\")<br />插入：names.insert(0,\"clr\") <br />删除： names.pop(0) |\n| 集合(set)   | names=set() | 添加：names.add(\"clr\")<br />删除：names.pop(0)/names.remove(\"clr\") |\n| 字典(dict)  | names ={}   | 取值：names[\"liuheng\"]<br />添加/修改：names[\"liuheng\"] = 18<br />删除：names.pop(\"liuheng\") |\n\n```python\n# 元组 tuple 不可修改\nprint(\"-------------------tuple---------------------\")\nnames = (\"liuheng\", \"lucas\", \"clr\") #用() 定义元组，括号里为元组的元素\ntype(names)\nprint(names)\nnames[1]\t\t\t\t\t\t# 通过[索引] 获取元素 \t\n# TypeError: 'tuple' object does not support item assignment\n# names[1] = \"222\"\nnames = names[1:]\t\t\t\t# 切片,从元组中截取部分元素\nprint(names)\n\nprint(\"------------------list----------------------\")\n# 列表 list\nnames = [\"liuheng\", \"lucas\"]   # 通过[] 定义列表\nprint(names)\n# 追加\nnames.append(\"clr\")\nprint(names)\n# 插入\nnames.insert(0, \"chenglirong\")\nprint(names)\n# 删除\nnames.pop(1)\nprint(names)\n# 访问\nprint(names[0])\n# 遍历\nfor name in names:\n    print(name)\n\n# 列表生成式\n[x for x in range(10) if x % 2 == 0]\nnew_names = [\"_\" + name for name in names]\nprint(new_names)\n# 切片\nprint(new_names[1:])\n\nprint(\"------------------set----------------------\")\n# 集合 set 去重，集合中的元素唯一\nnames = set([\"liuheng\", \"liuheng\", \"lucas\"])\nprint(names)\n# 集合生成式\nnames = {x + \"xxx\" for x in names}\nprint(names)\n\nprint(\"------------------dict----------------------\")\n# 字典 dict\npersons = {\"liuheng\": 18, \"lucas\": 12}\nprint(persons)\nprint(type(persons))\n# 增\npersons[\"crl\"] = 18\nprint(persons)\n# 改\npersons[\"liuheng\"] = 9\nprint(persons)\n# 删\npersons.pop(\"lucas\")\nprint(persons)\n\n# 遍历\nfor k in persons.keys():\n    print(k)\n\nfor v in persons.values():\n    print(v)\n\nfor k, v in persons.items():\n    print(k + \":\" + str(v))\n\n# 字典生成式\nd = {i: i * i for i in range(6)}\nprint(d)\n\n```\n\n### 二、分支结构\n\n```python\nif 条件1:\t\t#语句后有':' \t\t\t\n\t...\t\t #语句下的代码块需与if空四个空格\n\t...\nelif 条件2：\n\t...\nelse:\n\t...\n\n#例子 if.py    \nprint(\"请输入年龄：\")\nage = int(input())\n\nif age >= 18:\n    print(\"年龄大于18\")\nelif age > 12:\n    print(\"年龄大于12，小于18\")\nelse:\n    print(\"年龄小于12\")\n```\n\n### 三、循环结构\n\n#### for 结构\n\n```python\nfor item in list:\t#语句末尾加‘:’\n\t...\t\t\t   #语句块与for 空4个空格\n\t...\t\t\t   #语句块与for 空4个空格\n#例子 for.py\t\nnames=[\"lucas\", \"liuhneg\"]\nfor name in names:\n    print(\"hello \"+name)\n\n#运行结果\nhello lucas\nhello liuhneg\n```\n\n#### while 结构\n\n```python\nwhile 条件:\t\t#语句末尾加‘:’\n\t...\t\t\t #语句块与while 空4个空格\n\t...\t\t\t #语句块与while 空4个空格\n    \n#例子 while.py\ni = 0\ntotal = 0\nwhile i < 10:\n    total += i\n    i += 1\nprint(total)\n\n#运行结果\n45\n```\n\n### 四、函数\n\n#### 函数定义\n\n```python\ndef 函数名: #语句末尾加‘:’\n\t...    #语句块与def 空4个空格\n\t...\n\n#例子 func.py    \ndef add(x, y):\n    return x+y\t\t\t#通过return 返回结果\n\nprint(add(1, 2))\n\n#运行结果\n3\n```\n\n#### 函数参数\n\n默认参数： 函数定义时给默认值，调用时如果没有传就用定义时的默认值\n\n```python\n#例子  func.py\ndef echo(name=\"liuheng\"):\n\tprint(name)\n\necho()\t\t\t# 使用默认参数，等价于echo(\"liuheng\")\necho(\"lucas\")\n\n#运行结果\nliuheng\nlucas\n```\n\n可变参数： 调用时可以传任意个数的参数（实际接收的是一个tuple）\n\n```python\n#例子  func.py\ndef calc(*nums):\t\t#与普通参数不同的是多个*\n    print(type(nums))\t #nums 实际是个tuple\n    s = 0\n    for num in nums:\n        s = s+num\n    return s\n\n\nprint(calc(1, 2, 3))\n\n#运行结果\n<class 'tuple'>\n6\n```\n\n字典参数： 调用时传多个k-v 数据对\n\n```python\n#例子  func.py\ndef person(**kw):\t\t\t#与普通参数不同的是多2个*\n    print(type(kw))\t\t\t#kw 变量实际是个dict\n    for k, v in kw.items():\n        print(k+\":\" + str(v))\n\n\nperson(name=\"liuheng\", age=18)\n\n#运行结果\n<class 'dict'>\nname:liuheng\nage:18\n\n# 限制key, 通过*与其他参数分割，*后指定key \ndef person2(*, city, job):\n    print(city + \":\" + job)\n\n\n# 调用是字典参数的key 只能是city,job\nperson2(city=\"jx\", job=\"rd\")\n# TypeError: person2() got an unexpected keyword argument 'job2'\nperson2(city=\"jx\", job2=\"rd\")   \n```\n\n#### 装饰器\n\n```python\n# 函数作为参数\ndef hello(callback):\n    callback(\"1122\")\n\n#匿名参数 lambda 参数: 处理逻辑\n#通过lambda 定义一个匿名函数作为参数传给hello\nhello(lambda x: print(x))   \n\n# ------装饰器------------\n# 定义装饰器函数\ndef log(func):\n    def wrapper(*args, **kw):\n        print('call %s():' % func.__name__)\n        return func(*args, **kw)\n\n    return wrapper\n\n\n# 通过@ 语法使用log装饰器包装echo函数\n# @log 相当于做了 echo = log(echo)\n@log\ndef echo(name):\n    print(name)\n\n\necho(\"111\")\n\n#运行结果\n1122\ncall echo():\n111\n```\n\n#### 生成器 &&  协程\n\n```python\n# ----------  生成器------------\ndef gen():\n    n = 0\n    while True:\n        print(\"gen before yield:\" + str(n))\n        yield n  #生成器通过 yield 返回数据\n        print(\"gen after yield:\" + str(n))\n        n = n + 1\n\n\nprint(type(gen()))\ng = gen()  # 函数gen()没有实际执行，只是返回一个生成器\nprint(\"before next\")\nm = g.__next__()  # 调用生成器的next 方法将触发gen() 函数执行，直到yield指令停止\nprint(\"after next\")\nprint(m)\nprint(\"before next2\")\nm = g.__next__()  # 从上次停止的地方继续开始执行，直到yield指令\nprint(\"after next2\")\nprint(m)\n\n#运行结果\n<class 'generator'>\nbefore next\ngen before yield:0\nafter next\n0\nbefore next2\ngen after yield:0\ngen before yield:1\nafter next2\n1\n\n\n\n# 基于生成器实现协程， 生产者-消费者\ndef consumer():\n    print(\"consumer start....\")\n    r = None\n    while True:\n        n = yield r\n        if not n:\n            return\n        print(\"consumer..........\" + str(n))\n        r = n*n\n\n\ndef produce(c):\n    c.send(None)\n    n = 0\n    while n < 5:\n        n = n + 1\n        print(\"produce...........\" + str(n))\n        r = c.send(n)\t#send 功能等价于__next__, 不同的是参数可以传递给上一个yield的返回值\n        print(r)\n\n\nproduce(consumer())\n\n#运行结果\nconsumer start....\nproduce...........1\nconsumer..........1\n1\nproduce...........2\nconsumer..........2\n4\nproduce...........3\nconsumer..........3\n9\nproduce...........4\nconsumer..........4\n16\nproduce...........5\nconsumer..........5\n25\n```\n\n### 五、IO\n\n#### 输入、输出\n\n```python\n#例子 input.py\nprint(\"请输入：\")\nage = input()\nprint(type(age))\nprint(age)\n\n#运行结果\n请输入：\n12\n<class 'str'>\n12\n```\n\n#### 文件读写\n\n```Python\nf = open(\"io.py\", 'r')\nfor line in f.readlines():\n    print(line)\nf.close()\n\n# 加异常处理 \nf = None\ntry:\n    f = open(\"io.py\", 'r')\n    for line in f.readlines():\n        print(line)\n    f.close()\nexcept Exception as e:\n    print(e)\nfinally:\n    if f:\n        f.close()\n\n# 语法糖 with 自动关闭文件\nwith open(\"io.py\", 'r') as f:\n  for line in f.readlines():  \n      print(line)\n```\n\n#### 异步IO\n\n```python\nimport asyncio\nfrom datetime import datetime\n\n\nasync def hello():\n    # print(datetime.now())\n    await asyncio.sleep(5)\n    # print(datetime.now())\n\n\nloop = asyncio.get_event_loop()\nprint(datetime.now())\n# 并行执行2个task(hello())\nloop.run_until_complete(asyncio.wait([hello(), hello()]))\nloop.close()\nprint(datetime.now())\n```\n\n### 六、模块\n\n```Python\nimport os\t # 通过import 导入模块\n\nprint(os.name)\n# print(os.uname())\nprint(os.environ)\n```\n\n### 七、面向对象\n\n```python\n# 定义Animal 类\nclass Animal(object):     #class 类名(基类)：\n    def echo(self):\n        print(\"Animal\")\n\n#  定义Dog 类继承自Animal\nclass Dog(Animal):\n    def __init__(self, name):\t# 构造函数\n        self.__name = name\n\n    def echo(self):\n        print(\"Dog-\" + self.__name)\n\n#  定义Cat 类继承自Animal\nclass Cat(Animal):\n    def __init__(self, name):\n        self.__name = name\n\n    def echo(self):\n        print(\"Cat-\" + self.__name)\n\n\nanimal = Dog(\"wongwong\")   #创建对象 \nanimal.echo()\n\nanimal = Cat(\"miaomiao\")\nanimal.echo()\n\n#  @property 定义属性, 实现setter、getter\nclass Person(object):\n    def __init__(self, name):\n        self.__name = name\n\n    @property\n    def name(self):\n        return self.__name\n\n    @name.setter\n    def name(self, value):\n        self.__name = value\n\n\np = Person(\"liuheng\")\nprint(p.name)          # 像访问成员变量一样访问属性，等价于调用 p.name()\np.name = \"lucas\"\nprint(p.name)\n```\n\n### 八、错误处理\n\n```python\n# try ... except ... finally 语句捕获异常\ndef err(a):\n    try:\n        10 / a\n    except Exception as e:\n        print(\"except\")\n        print(e)\n    finally:\n        print(\"finally\")\n\n\nerr(0)\n\nf = None\ntry:\n    f = open(\"io0000.py\", 'r')\n    for line in f.readlines():\n        print(line)\n    f.close()\nexcept Exception as e:\n    print(e)\nfinally:\n    if f:\n        f.close()\n```\n\n","source":"_posts/python-tutorial.md","raw":"---\ntitle: python tutorial\ndate: 2023-12-09 19:11:03\ntags: [python, linux]\n---\n\n### 一、变量\n\n#### 变量的类型\n\n- 数值型\n- 布尔型\n- 字符型\n- 抽象结构（容器类+自定义class）\n\ntype(变量名)： 获取变量的类型\n\n特殊类型变量：None 表示空、假...\n\n类型转化：str(变量) 转化成字符串， int(变量) 转化成数字 \n\n```python\nname =\"liuheng\"\ntype(name)\n<class 'str'>\ntype(int(age))\n<class 'int'>\ntype(1.0)\n<class 'float'>\ntype(None)\n<class 'NoneType'>\ntype(True)\n<class 'bool'>\n```\n\n#### 变量的定义\n\n定义：变量名 = 变量值\n\n#### 数据容器\n\n数据容器(数据结构)变量：用来装一组数据的变量\n\n| 容器        | 定义        | 操作                                                         |\n| ----------- | ----------- | ------------------------------------------------------------ |\n| 元组(tuple) | names=()    | 取值：names[0]，不可修改                                     |\n| 列表(list)  | names=[]    | 取值：names[0]<br />追加：names.append(\"clr\")<br />插入：names.insert(0,\"clr\") <br />删除： names.pop(0) |\n| 集合(set)   | names=set() | 添加：names.add(\"clr\")<br />删除：names.pop(0)/names.remove(\"clr\") |\n| 字典(dict)  | names ={}   | 取值：names[\"liuheng\"]<br />添加/修改：names[\"liuheng\"] = 18<br />删除：names.pop(\"liuheng\") |\n\n```python\n# 元组 tuple 不可修改\nprint(\"-------------------tuple---------------------\")\nnames = (\"liuheng\", \"lucas\", \"clr\") #用() 定义元组，括号里为元组的元素\ntype(names)\nprint(names)\nnames[1]\t\t\t\t\t\t# 通过[索引] 获取元素 \t\n# TypeError: 'tuple' object does not support item assignment\n# names[1] = \"222\"\nnames = names[1:]\t\t\t\t# 切片,从元组中截取部分元素\nprint(names)\n\nprint(\"------------------list----------------------\")\n# 列表 list\nnames = [\"liuheng\", \"lucas\"]   # 通过[] 定义列表\nprint(names)\n# 追加\nnames.append(\"clr\")\nprint(names)\n# 插入\nnames.insert(0, \"chenglirong\")\nprint(names)\n# 删除\nnames.pop(1)\nprint(names)\n# 访问\nprint(names[0])\n# 遍历\nfor name in names:\n    print(name)\n\n# 列表生成式\n[x for x in range(10) if x % 2 == 0]\nnew_names = [\"_\" + name for name in names]\nprint(new_names)\n# 切片\nprint(new_names[1:])\n\nprint(\"------------------set----------------------\")\n# 集合 set 去重，集合中的元素唯一\nnames = set([\"liuheng\", \"liuheng\", \"lucas\"])\nprint(names)\n# 集合生成式\nnames = {x + \"xxx\" for x in names}\nprint(names)\n\nprint(\"------------------dict----------------------\")\n# 字典 dict\npersons = {\"liuheng\": 18, \"lucas\": 12}\nprint(persons)\nprint(type(persons))\n# 增\npersons[\"crl\"] = 18\nprint(persons)\n# 改\npersons[\"liuheng\"] = 9\nprint(persons)\n# 删\npersons.pop(\"lucas\")\nprint(persons)\n\n# 遍历\nfor k in persons.keys():\n    print(k)\n\nfor v in persons.values():\n    print(v)\n\nfor k, v in persons.items():\n    print(k + \":\" + str(v))\n\n# 字典生成式\nd = {i: i * i for i in range(6)}\nprint(d)\n\n```\n\n### 二、分支结构\n\n```python\nif 条件1:\t\t#语句后有':' \t\t\t\n\t...\t\t #语句下的代码块需与if空四个空格\n\t...\nelif 条件2：\n\t...\nelse:\n\t...\n\n#例子 if.py    \nprint(\"请输入年龄：\")\nage = int(input())\n\nif age >= 18:\n    print(\"年龄大于18\")\nelif age > 12:\n    print(\"年龄大于12，小于18\")\nelse:\n    print(\"年龄小于12\")\n```\n\n### 三、循环结构\n\n#### for 结构\n\n```python\nfor item in list:\t#语句末尾加‘:’\n\t...\t\t\t   #语句块与for 空4个空格\n\t...\t\t\t   #语句块与for 空4个空格\n#例子 for.py\t\nnames=[\"lucas\", \"liuhneg\"]\nfor name in names:\n    print(\"hello \"+name)\n\n#运行结果\nhello lucas\nhello liuhneg\n```\n\n#### while 结构\n\n```python\nwhile 条件:\t\t#语句末尾加‘:’\n\t...\t\t\t #语句块与while 空4个空格\n\t...\t\t\t #语句块与while 空4个空格\n    \n#例子 while.py\ni = 0\ntotal = 0\nwhile i < 10:\n    total += i\n    i += 1\nprint(total)\n\n#运行结果\n45\n```\n\n### 四、函数\n\n#### 函数定义\n\n```python\ndef 函数名: #语句末尾加‘:’\n\t...    #语句块与def 空4个空格\n\t...\n\n#例子 func.py    \ndef add(x, y):\n    return x+y\t\t\t#通过return 返回结果\n\nprint(add(1, 2))\n\n#运行结果\n3\n```\n\n#### 函数参数\n\n默认参数： 函数定义时给默认值，调用时如果没有传就用定义时的默认值\n\n```python\n#例子  func.py\ndef echo(name=\"liuheng\"):\n\tprint(name)\n\necho()\t\t\t# 使用默认参数，等价于echo(\"liuheng\")\necho(\"lucas\")\n\n#运行结果\nliuheng\nlucas\n```\n\n可变参数： 调用时可以传任意个数的参数（实际接收的是一个tuple）\n\n```python\n#例子  func.py\ndef calc(*nums):\t\t#与普通参数不同的是多个*\n    print(type(nums))\t #nums 实际是个tuple\n    s = 0\n    for num in nums:\n        s = s+num\n    return s\n\n\nprint(calc(1, 2, 3))\n\n#运行结果\n<class 'tuple'>\n6\n```\n\n字典参数： 调用时传多个k-v 数据对\n\n```python\n#例子  func.py\ndef person(**kw):\t\t\t#与普通参数不同的是多2个*\n    print(type(kw))\t\t\t#kw 变量实际是个dict\n    for k, v in kw.items():\n        print(k+\":\" + str(v))\n\n\nperson(name=\"liuheng\", age=18)\n\n#运行结果\n<class 'dict'>\nname:liuheng\nage:18\n\n# 限制key, 通过*与其他参数分割，*后指定key \ndef person2(*, city, job):\n    print(city + \":\" + job)\n\n\n# 调用是字典参数的key 只能是city,job\nperson2(city=\"jx\", job=\"rd\")\n# TypeError: person2() got an unexpected keyword argument 'job2'\nperson2(city=\"jx\", job2=\"rd\")   \n```\n\n#### 装饰器\n\n```python\n# 函数作为参数\ndef hello(callback):\n    callback(\"1122\")\n\n#匿名参数 lambda 参数: 处理逻辑\n#通过lambda 定义一个匿名函数作为参数传给hello\nhello(lambda x: print(x))   \n\n# ------装饰器------------\n# 定义装饰器函数\ndef log(func):\n    def wrapper(*args, **kw):\n        print('call %s():' % func.__name__)\n        return func(*args, **kw)\n\n    return wrapper\n\n\n# 通过@ 语法使用log装饰器包装echo函数\n# @log 相当于做了 echo = log(echo)\n@log\ndef echo(name):\n    print(name)\n\n\necho(\"111\")\n\n#运行结果\n1122\ncall echo():\n111\n```\n\n#### 生成器 &&  协程\n\n```python\n# ----------  生成器------------\ndef gen():\n    n = 0\n    while True:\n        print(\"gen before yield:\" + str(n))\n        yield n  #生成器通过 yield 返回数据\n        print(\"gen after yield:\" + str(n))\n        n = n + 1\n\n\nprint(type(gen()))\ng = gen()  # 函数gen()没有实际执行，只是返回一个生成器\nprint(\"before next\")\nm = g.__next__()  # 调用生成器的next 方法将触发gen() 函数执行，直到yield指令停止\nprint(\"after next\")\nprint(m)\nprint(\"before next2\")\nm = g.__next__()  # 从上次停止的地方继续开始执行，直到yield指令\nprint(\"after next2\")\nprint(m)\n\n#运行结果\n<class 'generator'>\nbefore next\ngen before yield:0\nafter next\n0\nbefore next2\ngen after yield:0\ngen before yield:1\nafter next2\n1\n\n\n\n# 基于生成器实现协程， 生产者-消费者\ndef consumer():\n    print(\"consumer start....\")\n    r = None\n    while True:\n        n = yield r\n        if not n:\n            return\n        print(\"consumer..........\" + str(n))\n        r = n*n\n\n\ndef produce(c):\n    c.send(None)\n    n = 0\n    while n < 5:\n        n = n + 1\n        print(\"produce...........\" + str(n))\n        r = c.send(n)\t#send 功能等价于__next__, 不同的是参数可以传递给上一个yield的返回值\n        print(r)\n\n\nproduce(consumer())\n\n#运行结果\nconsumer start....\nproduce...........1\nconsumer..........1\n1\nproduce...........2\nconsumer..........2\n4\nproduce...........3\nconsumer..........3\n9\nproduce...........4\nconsumer..........4\n16\nproduce...........5\nconsumer..........5\n25\n```\n\n### 五、IO\n\n#### 输入、输出\n\n```python\n#例子 input.py\nprint(\"请输入：\")\nage = input()\nprint(type(age))\nprint(age)\n\n#运行结果\n请输入：\n12\n<class 'str'>\n12\n```\n\n#### 文件读写\n\n```Python\nf = open(\"io.py\", 'r')\nfor line in f.readlines():\n    print(line)\nf.close()\n\n# 加异常处理 \nf = None\ntry:\n    f = open(\"io.py\", 'r')\n    for line in f.readlines():\n        print(line)\n    f.close()\nexcept Exception as e:\n    print(e)\nfinally:\n    if f:\n        f.close()\n\n# 语法糖 with 自动关闭文件\nwith open(\"io.py\", 'r') as f:\n  for line in f.readlines():  \n      print(line)\n```\n\n#### 异步IO\n\n```python\nimport asyncio\nfrom datetime import datetime\n\n\nasync def hello():\n    # print(datetime.now())\n    await asyncio.sleep(5)\n    # print(datetime.now())\n\n\nloop = asyncio.get_event_loop()\nprint(datetime.now())\n# 并行执行2个task(hello())\nloop.run_until_complete(asyncio.wait([hello(), hello()]))\nloop.close()\nprint(datetime.now())\n```\n\n### 六、模块\n\n```Python\nimport os\t # 通过import 导入模块\n\nprint(os.name)\n# print(os.uname())\nprint(os.environ)\n```\n\n### 七、面向对象\n\n```python\n# 定义Animal 类\nclass Animal(object):     #class 类名(基类)：\n    def echo(self):\n        print(\"Animal\")\n\n#  定义Dog 类继承自Animal\nclass Dog(Animal):\n    def __init__(self, name):\t# 构造函数\n        self.__name = name\n\n    def echo(self):\n        print(\"Dog-\" + self.__name)\n\n#  定义Cat 类继承自Animal\nclass Cat(Animal):\n    def __init__(self, name):\n        self.__name = name\n\n    def echo(self):\n        print(\"Cat-\" + self.__name)\n\n\nanimal = Dog(\"wongwong\")   #创建对象 \nanimal.echo()\n\nanimal = Cat(\"miaomiao\")\nanimal.echo()\n\n#  @property 定义属性, 实现setter、getter\nclass Person(object):\n    def __init__(self, name):\n        self.__name = name\n\n    @property\n    def name(self):\n        return self.__name\n\n    @name.setter\n    def name(self, value):\n        self.__name = value\n\n\np = Person(\"liuheng\")\nprint(p.name)          # 像访问成员变量一样访问属性，等价于调用 p.name()\np.name = \"lucas\"\nprint(p.name)\n```\n\n### 八、错误处理\n\n```python\n# try ... except ... finally 语句捕获异常\ndef err(a):\n    try:\n        10 / a\n    except Exception as e:\n        print(\"except\")\n        print(e)\n    finally:\n        print(\"finally\")\n\n\nerr(0)\n\nf = None\ntry:\n    f = open(\"io0000.py\", 'r')\n    for line in f.readlines():\n        print(line)\n    f.close()\nexcept Exception as e:\n    print(e)\nfinally:\n    if f:\n        f.close()\n```\n\n","slug":"python-tutorial","published":1,"updated":"2023-12-09T12:16:58.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpy20kxb0000kksi7vqhad8u","content":"<h3 id=\"一、变量\"><a href=\"#一、变量\" class=\"headerlink\" title=\"一、变量\"></a>一、变量</h3><h4 id=\"变量的类型\"><a href=\"#变量的类型\" class=\"headerlink\" title=\"变量的类型\"></a>变量的类型</h4><ul>\n<li>数值型</li>\n<li>布尔型</li>\n<li>字符型</li>\n<li>抽象结构（容器类+自定义class）</li>\n</ul>\n<p>type(变量名)： 获取变量的类型</p>\n<p>特殊类型变量：None 表示空、假…</p>\n<p>类型转化：str(变量) 转化成字符串， int(变量) 转化成数字 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name =<span class=\"string\">&quot;liuheng&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">type</span>(name)</span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;str&#x27;</span>&gt;</span><br><span class=\"line\"><span class=\"built_in\">type</span>(<span class=\"built_in\">int</span>(age))</span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;int&#x27;</span>&gt;</span><br><span class=\"line\"><span class=\"built_in\">type</span>(<span class=\"number\">1.0</span>)</span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;float&#x27;</span>&gt;</span><br><span class=\"line\"><span class=\"built_in\">type</span>(<span class=\"literal\">None</span>)</span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;NoneType&#x27;</span>&gt;</span><br><span class=\"line\"><span class=\"built_in\">type</span>(<span class=\"literal\">True</span>)</span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;bool&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"变量的定义\"><a href=\"#变量的定义\" class=\"headerlink\" title=\"变量的定义\"></a>变量的定义</h4><p>定义：变量名 &#x3D; 变量值</p>\n<h4 id=\"数据容器\"><a href=\"#数据容器\" class=\"headerlink\" title=\"数据容器\"></a>数据容器</h4><p>数据容器(数据结构)变量：用来装一组数据的变量</p>\n<table>\n<thead>\n<tr>\n<th>容器</th>\n<th>定义</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>元组(tuple)</td>\n<td>names&#x3D;()</td>\n<td>取值：names[0]，不可修改</td>\n</tr>\n<tr>\n<td>列表(list)</td>\n<td>names&#x3D;[]</td>\n<td>取值：names[0]<br />追加：names.append(“clr”)<br />插入：names.insert(0,”clr”) <br />删除： names.pop(0)</td>\n</tr>\n<tr>\n<td>集合(set)</td>\n<td>names&#x3D;set()</td>\n<td>添加：names.add(“clr”)<br />删除：names.pop(0)&#x2F;names.remove(“clr”)</td>\n</tr>\n<tr>\n<td>字典(dict)</td>\n<td>names &#x3D;{}</td>\n<td>取值：names[“liuheng”]<br />添加&#x2F;修改：names[“liuheng”] &#x3D; 18<br />删除：names.pop(“liuheng”)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 元组 tuple 不可修改</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-------------------tuple---------------------&quot;</span>)</span><br><span class=\"line\">names = (<span class=\"string\">&quot;liuheng&quot;</span>, <span class=\"string\">&quot;lucas&quot;</span>, <span class=\"string\">&quot;clr&quot;</span>) <span class=\"comment\">#用() 定义元组，括号里为元组的元素</span></span><br><span class=\"line\"><span class=\"built_in\">type</span>(names)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\">names[<span class=\"number\">1</span>]\t\t\t\t\t\t<span class=\"comment\"># 通过[索引] 获取元素 \t</span></span><br><span class=\"line\"><span class=\"comment\"># TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class=\"line\"><span class=\"comment\"># names[1] = &quot;222&quot;</span></span><br><span class=\"line\">names = names[<span class=\"number\">1</span>:]\t\t\t\t<span class=\"comment\"># 切片,从元组中截取部分元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;------------------list----------------------&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 列表 list</span></span><br><span class=\"line\">names = [<span class=\"string\">&quot;liuheng&quot;</span>, <span class=\"string\">&quot;lucas&quot;</span>]   <span class=\"comment\"># 通过[] 定义列表</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"><span class=\"comment\"># 追加</span></span><br><span class=\"line\">names.append(<span class=\"string\">&quot;clr&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"><span class=\"comment\"># 插入</span></span><br><span class=\"line\">names.insert(<span class=\"number\">0</span>, <span class=\"string\">&quot;chenglirong&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"><span class=\"comment\"># 删除</span></span><br><span class=\"line\">names.pop(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"><span class=\"comment\"># 访问</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(names[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"comment\"># 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表生成式</span></span><br><span class=\"line\">[x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) <span class=\"keyword\">if</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span>]</span><br><span class=\"line\">new_names = [<span class=\"string\">&quot;_&quot;</span> + name <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_names)</span><br><span class=\"line\"><span class=\"comment\"># 切片</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_names[<span class=\"number\">1</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;------------------set----------------------&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 集合 set 去重，集合中的元素唯一</span></span><br><span class=\"line\">names = <span class=\"built_in\">set</span>([<span class=\"string\">&quot;liuheng&quot;</span>, <span class=\"string\">&quot;liuheng&quot;</span>, <span class=\"string\">&quot;lucas&quot;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"><span class=\"comment\"># 集合生成式</span></span><br><span class=\"line\">names = &#123;x + <span class=\"string\">&quot;xxx&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> names&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;------------------dict----------------------&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 字典 dict</span></span><br><span class=\"line\">persons = &#123;<span class=\"string\">&quot;liuheng&quot;</span>: <span class=\"number\">18</span>, <span class=\"string\">&quot;lucas&quot;</span>: <span class=\"number\">12</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(persons)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(persons))</span><br><span class=\"line\"><span class=\"comment\"># 增</span></span><br><span class=\"line\">persons[<span class=\"string\">&quot;crl&quot;</span>] = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(persons)</span><br><span class=\"line\"><span class=\"comment\"># 改</span></span><br><span class=\"line\">persons[<span class=\"string\">&quot;liuheng&quot;</span>] = <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(persons)</span><br><span class=\"line\"><span class=\"comment\"># 删</span></span><br><span class=\"line\">persons.pop(<span class=\"string\">&quot;lucas&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(persons)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> persons.keys():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> persons.values():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> persons.items():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k + <span class=\"string\">&quot;:&quot;</span> + <span class=\"built_in\">str</span>(v))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典生成式</span></span><br><span class=\"line\">d = &#123;i: i * i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、分支结构\"><a href=\"#二、分支结构\" class=\"headerlink\" title=\"二、分支结构\"></a>二、分支结构</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件<span class=\"number\">1</span>:\t\t<span class=\"comment\">#语句后有&#x27;:&#x27; \t\t\t</span></span><br><span class=\"line\">\t...\t\t <span class=\"comment\">#语句下的代码块需与if空四个空格</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件<span class=\"number\">2</span>：</span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#例子 if.py    </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;请输入年龄：&quot;</span>)</span><br><span class=\"line\">age = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄大于18&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt; <span class=\"number\">12</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄大于12，小于18&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄小于12&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、循环结构\"><a href=\"#三、循环结构\" class=\"headerlink\" title=\"三、循环结构\"></a>三、循环结构</h3><h4 id=\"for-结构\"><a href=\"#for-结构\" class=\"headerlink\" title=\"for 结构\"></a>for 结构</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"built_in\">list</span>:\t<span class=\"comment\">#语句末尾加‘:’</span></span><br><span class=\"line\">\t...\t\t\t   <span class=\"comment\">#语句块与for 空4个空格</span></span><br><span class=\"line\">\t...\t\t\t   <span class=\"comment\">#语句块与for 空4个空格</span></span><br><span class=\"line\"><span class=\"comment\">#例子 for.py\t</span></span><br><span class=\"line\">names=[<span class=\"string\">&quot;lucas&quot;</span>, <span class=\"string\">&quot;liuhneg&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello &quot;</span>+name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">hello lucas</span><br><span class=\"line\">hello liuhneg</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"while-结构\"><a href=\"#while-结构\" class=\"headerlink\" title=\"while 结构\"></a>while 结构</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 条件:\t\t<span class=\"comment\">#语句末尾加‘:’</span></span><br><span class=\"line\">\t...\t\t\t <span class=\"comment\">#语句块与while 空4个空格</span></span><br><span class=\"line\">\t...\t\t\t <span class=\"comment\">#语句块与while 空4个空格</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#例子 while.py</span></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\">total = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    total += i</span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(total)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\"><span class=\"number\">45</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、函数\"><a href=\"#四、函数\" class=\"headerlink\" title=\"四、函数\"></a>四、函数</h3><h4 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">函数名</span>: <span class=\"comment\">#语句末尾加‘:’</span></span><br><span class=\"line\">\t...    <span class=\"comment\">#语句块与def 空4个空格</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#例子 func.py    </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y\t\t\t<span class=\"comment\">#通过return 返回结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(add(<span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h4><p>默认参数： 函数定义时给默认值，调用时如果没有传就用定义时的默认值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例子  func.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">echo</span>(<span class=\"params\">name=<span class=\"string\">&quot;liuheng&quot;</span></span>):</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\">echo()\t\t\t<span class=\"comment\"># 使用默认参数，等价于echo(&quot;liuheng&quot;)</span></span><br><span class=\"line\">echo(<span class=\"string\">&quot;lucas&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">liuheng</span><br><span class=\"line\">lucas</span><br></pre></td></tr></table></figure>\n\n<p>可变参数： 调用时可以传任意个数的参数（实际接收的是一个tuple）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例子  func.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calc</span>(<span class=\"params\">*nums</span>):\t\t<span class=\"comment\">#与普通参数不同的是多个*</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(nums))\t <span class=\"comment\">#nums 实际是个tuple</span></span><br><span class=\"line\">    s = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        s = s+num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(calc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;tuple&#x27;</span>&gt;</span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p>字典参数： 调用时传多个k-v 数据对</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例子  func.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person</span>(<span class=\"params\">**kw</span>):\t\t\t<span class=\"comment\">#与普通参数不同的是多2个*</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(kw))\t\t\t<span class=\"comment\">#kw 变量实际是个dict</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> kw.items():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(k+<span class=\"string\">&quot;:&quot;</span> + <span class=\"built_in\">str</span>(v))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">person(name=<span class=\"string\">&quot;liuheng&quot;</span>, age=<span class=\"number\">18</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;dict&#x27;</span>&gt;</span><br><span class=\"line\">name:liuheng</span><br><span class=\"line\">age:<span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 限制key, 通过*与其他参数分割，*后指定key </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person2</span>(<span class=\"params\">*, city, job</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(city + <span class=\"string\">&quot;:&quot;</span> + job)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用是字典参数的key 只能是city,job</span></span><br><span class=\"line\">person2(city=<span class=\"string\">&quot;jx&quot;</span>, job=<span class=\"string\">&quot;rd&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># TypeError: person2() got an unexpected keyword argument &#x27;job2&#x27;</span></span><br><span class=\"line\">person2(city=<span class=\"string\">&quot;jx&quot;</span>, job2=<span class=\"string\">&quot;rd&quot;</span>)   </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 函数作为参数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hello</span>(<span class=\"params\">callback</span>):</span><br><span class=\"line\">    callback(<span class=\"string\">&quot;1122&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#匿名参数 lambda 参数: 处理逻辑</span></span><br><span class=\"line\"><span class=\"comment\">#通过lambda 定义一个匿名函数作为参数传给hello</span></span><br><span class=\"line\">hello(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">print</span>(x))   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ------装饰器------------</span></span><br><span class=\"line\"><span class=\"comment\"># 定义装饰器函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">log</span>(<span class=\"params\">func</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">wrapper</span>(<span class=\"params\">*args, **kw</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过@ 语法使用log装饰器包装echo函数</span></span><br><span class=\"line\"><span class=\"comment\"># @log 相当于做了 echo = log(echo)</span></span><br><span class=\"line\"><span class=\"meta\">@log</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">echo</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo(<span class=\"string\">&quot;111&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\"><span class=\"number\">1122</span></span><br><span class=\"line\">call echo():</span><br><span class=\"line\"><span class=\"number\">111</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成器-协程\"><a href=\"#生成器-协程\" class=\"headerlink\" title=\"生成器 &amp;&amp;  协程\"></a>生成器 &amp;&amp;  协程</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ----------  生成器------------</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gen</span>():</span><br><span class=\"line\">    n = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;gen before yield:&quot;</span> + <span class=\"built_in\">str</span>(n))</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> n  <span class=\"comment\">#生成器通过 yield 返回数据</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;gen after yield:&quot;</span> + <span class=\"built_in\">str</span>(n))</span><br><span class=\"line\">        n = n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(gen()))</span><br><span class=\"line\">g = gen()  <span class=\"comment\"># 函数gen()没有实际执行，只是返回一个生成器</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;before next&quot;</span>)</span><br><span class=\"line\">m = g.__next__()  <span class=\"comment\"># 调用生成器的next 方法将触发gen() 函数执行，直到yield指令停止</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;after next&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;before next2&quot;</span>)</span><br><span class=\"line\">m = g.__next__()  <span class=\"comment\"># 从上次停止的地方继续开始执行，直到yield指令</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;after next2&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;generator&#x27;</span>&gt;</span><br><span class=\"line\">before <span class=\"built_in\">next</span></span><br><span class=\"line\">gen before <span class=\"keyword\">yield</span>:<span class=\"number\">0</span></span><br><span class=\"line\">after <span class=\"built_in\">next</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\">before next2</span><br><span class=\"line\">gen after <span class=\"keyword\">yield</span>:<span class=\"number\">0</span></span><br><span class=\"line\">gen before <span class=\"keyword\">yield</span>:<span class=\"number\">1</span></span><br><span class=\"line\">after next2</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基于生成器实现协程， 生产者-消费者</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">consumer</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;consumer start....&quot;</span>)</span><br><span class=\"line\">    r = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        n = <span class=\"keyword\">yield</span> r</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;consumer..........&quot;</span> + <span class=\"built_in\">str</span>(n))</span><br><span class=\"line\">        r = n*n</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">produce</span>(<span class=\"params\">c</span>):</span><br><span class=\"line\">    c.send(<span class=\"literal\">None</span>)</span><br><span class=\"line\">    n = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">        n = n + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;produce...........&quot;</span> + <span class=\"built_in\">str</span>(n))</span><br><span class=\"line\">        r = c.send(n)\t<span class=\"comment\">#send 功能等价于__next__, 不同的是参数可以传递给上一个yield的返回值</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(r)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">produce(consumer())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">consumer start....</span><br><span class=\"line\">produce..........<span class=\"number\">.1</span></span><br><span class=\"line\">consumer.........<span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">produce..........<span class=\"number\">.2</span></span><br><span class=\"line\">consumer.........<span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">produce..........<span class=\"number\">.3</span></span><br><span class=\"line\">consumer.........<span class=\"number\">.3</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\">produce..........<span class=\"number\">.4</span></span><br><span class=\"line\">consumer.........<span class=\"number\">.4</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\">produce..........<span class=\"number\">.5</span></span><br><span class=\"line\">consumer.........<span class=\"number\">.5</span></span><br><span class=\"line\"><span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、IO\"><a href=\"#五、IO\" class=\"headerlink\" title=\"五、IO\"></a>五、IO</h3><h4 id=\"输入、输出\"><a href=\"#输入、输出\" class=\"headerlink\" title=\"输入、输出\"></a>输入、输出</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例子 input.py</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;请输入：&quot;</span>)</span><br><span class=\"line\">age = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(age))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(age)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">请输入：</span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;str&#x27;</span>&gt;</span><br><span class=\"line\"><span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;io.py&quot;</span>, <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(line)</span><br><span class=\"line\">f.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加异常处理 </span></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;io.py&quot;</span>, <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(line)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> f:</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 语法糖 with 自动关闭文件</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;io.py&quot;</span>, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">  <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines():  </span><br><span class=\"line\">      <span class=\"built_in\">print</span>(line)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"异步IO\"><a href=\"#异步IO\" class=\"headerlink\" title=\"异步IO\"></a>异步IO</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">hello</span>():</span><br><span class=\"line\">    <span class=\"comment\"># print(datetime.now())</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"comment\"># print(datetime.now())</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(datetime.now())</span><br><span class=\"line\"><span class=\"comment\"># 并行执行2个task(hello())</span></span><br><span class=\"line\">loop.run_until_complete(asyncio.wait([hello(), hello()]))</span><br><span class=\"line\">loop.close()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(datetime.now())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"六、模块\"><a href=\"#六、模块\" class=\"headerlink\" title=\"六、模块\"></a>六、模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os\t <span class=\"comment\"># 通过import 导入模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.name)</span><br><span class=\"line\"><span class=\"comment\"># print(os.uname())</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.environ)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"七、面向对象\"><a href=\"#七、面向对象\" class=\"headerlink\" title=\"七、面向对象\"></a>七、面向对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义Animal 类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>(<span class=\"title class_ inherited__\">object</span>):     <span class=\"comment\">#class 类名(基类)：</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">echo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Animal&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  定义Dog 类继承自Animal</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>(<span class=\"title class_ inherited__\">Animal</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):\t<span class=\"comment\"># 构造函数</span></span><br><span class=\"line\">        self.__name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">echo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dog-&quot;</span> + self.__name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  定义Cat 类继承自Animal</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span>(<span class=\"title class_ inherited__\">Animal</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.__name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">echo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Cat-&quot;</span> + self.__name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">animal = Dog(<span class=\"string\">&quot;wongwong&quot;</span>)   <span class=\"comment\">#创建对象 </span></span><br><span class=\"line\">animal.echo()</span><br><span class=\"line\"></span><br><span class=\"line\">animal = Cat(<span class=\"string\">&quot;miaomiao&quot;</span>)</span><br><span class=\"line\">animal.echo()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  @property 定义属性, 实现setter、getter</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.__name = name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">name</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @name.setter</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">name</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.__name = value</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p = Person(<span class=\"string\">&quot;liuheng&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p.name)          <span class=\"comment\"># 像访问成员变量一样访问属性，等价于调用 p.name()</span></span><br><span class=\"line\">p.name = <span class=\"string\">&quot;lucas&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(p.name)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"八、错误处理\"><a href=\"#八、错误处理\" class=\"headerlink\" title=\"八、错误处理\"></a>八、错误处理</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># try ... except ... finally 语句捕获异常</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">err</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"number\">10</span> / a</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;except&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;finally&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">err(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;io0000.py&quot;</span>, <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(line)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> f:</span><br><span class=\"line\">        f.close()</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、变量\"><a href=\"#一、变量\" class=\"headerlink\" title=\"一、变量\"></a>一、变量</h3><h4 id=\"变量的类型\"><a href=\"#变量的类型\" class=\"headerlink\" title=\"变量的类型\"></a>变量的类型</h4><ul>\n<li>数值型</li>\n<li>布尔型</li>\n<li>字符型</li>\n<li>抽象结构（容器类+自定义class）</li>\n</ul>\n<p>type(变量名)： 获取变量的类型</p>\n<p>特殊类型变量：None 表示空、假…</p>\n<p>类型转化：str(变量) 转化成字符串， int(变量) 转化成数字 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name =<span class=\"string\">&quot;liuheng&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">type</span>(name)</span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;str&#x27;</span>&gt;</span><br><span class=\"line\"><span class=\"built_in\">type</span>(<span class=\"built_in\">int</span>(age))</span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;int&#x27;</span>&gt;</span><br><span class=\"line\"><span class=\"built_in\">type</span>(<span class=\"number\">1.0</span>)</span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;float&#x27;</span>&gt;</span><br><span class=\"line\"><span class=\"built_in\">type</span>(<span class=\"literal\">None</span>)</span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;NoneType&#x27;</span>&gt;</span><br><span class=\"line\"><span class=\"built_in\">type</span>(<span class=\"literal\">True</span>)</span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;bool&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"变量的定义\"><a href=\"#变量的定义\" class=\"headerlink\" title=\"变量的定义\"></a>变量的定义</h4><p>定义：变量名 &#x3D; 变量值</p>\n<h4 id=\"数据容器\"><a href=\"#数据容器\" class=\"headerlink\" title=\"数据容器\"></a>数据容器</h4><p>数据容器(数据结构)变量：用来装一组数据的变量</p>\n<table>\n<thead>\n<tr>\n<th>容器</th>\n<th>定义</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>元组(tuple)</td>\n<td>names&#x3D;()</td>\n<td>取值：names[0]，不可修改</td>\n</tr>\n<tr>\n<td>列表(list)</td>\n<td>names&#x3D;[]</td>\n<td>取值：names[0]<br />追加：names.append(“clr”)<br />插入：names.insert(0,”clr”) <br />删除： names.pop(0)</td>\n</tr>\n<tr>\n<td>集合(set)</td>\n<td>names&#x3D;set()</td>\n<td>添加：names.add(“clr”)<br />删除：names.pop(0)&#x2F;names.remove(“clr”)</td>\n</tr>\n<tr>\n<td>字典(dict)</td>\n<td>names &#x3D;{}</td>\n<td>取值：names[“liuheng”]<br />添加&#x2F;修改：names[“liuheng”] &#x3D; 18<br />删除：names.pop(“liuheng”)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 元组 tuple 不可修改</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-------------------tuple---------------------&quot;</span>)</span><br><span class=\"line\">names = (<span class=\"string\">&quot;liuheng&quot;</span>, <span class=\"string\">&quot;lucas&quot;</span>, <span class=\"string\">&quot;clr&quot;</span>) <span class=\"comment\">#用() 定义元组，括号里为元组的元素</span></span><br><span class=\"line\"><span class=\"built_in\">type</span>(names)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\">names[<span class=\"number\">1</span>]\t\t\t\t\t\t<span class=\"comment\"># 通过[索引] 获取元素 \t</span></span><br><span class=\"line\"><span class=\"comment\"># TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class=\"line\"><span class=\"comment\"># names[1] = &quot;222&quot;</span></span><br><span class=\"line\">names = names[<span class=\"number\">1</span>:]\t\t\t\t<span class=\"comment\"># 切片,从元组中截取部分元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;------------------list----------------------&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 列表 list</span></span><br><span class=\"line\">names = [<span class=\"string\">&quot;liuheng&quot;</span>, <span class=\"string\">&quot;lucas&quot;</span>]   <span class=\"comment\"># 通过[] 定义列表</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"><span class=\"comment\"># 追加</span></span><br><span class=\"line\">names.append(<span class=\"string\">&quot;clr&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"><span class=\"comment\"># 插入</span></span><br><span class=\"line\">names.insert(<span class=\"number\">0</span>, <span class=\"string\">&quot;chenglirong&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"><span class=\"comment\"># 删除</span></span><br><span class=\"line\">names.pop(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"><span class=\"comment\"># 访问</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(names[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"comment\"># 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表生成式</span></span><br><span class=\"line\">[x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) <span class=\"keyword\">if</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span>]</span><br><span class=\"line\">new_names = [<span class=\"string\">&quot;_&quot;</span> + name <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_names)</span><br><span class=\"line\"><span class=\"comment\"># 切片</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_names[<span class=\"number\">1</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;------------------set----------------------&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 集合 set 去重，集合中的元素唯一</span></span><br><span class=\"line\">names = <span class=\"built_in\">set</span>([<span class=\"string\">&quot;liuheng&quot;</span>, <span class=\"string\">&quot;liuheng&quot;</span>, <span class=\"string\">&quot;lucas&quot;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"><span class=\"comment\"># 集合生成式</span></span><br><span class=\"line\">names = &#123;x + <span class=\"string\">&quot;xxx&quot;</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> names&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;------------------dict----------------------&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 字典 dict</span></span><br><span class=\"line\">persons = &#123;<span class=\"string\">&quot;liuheng&quot;</span>: <span class=\"number\">18</span>, <span class=\"string\">&quot;lucas&quot;</span>: <span class=\"number\">12</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(persons)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(persons))</span><br><span class=\"line\"><span class=\"comment\"># 增</span></span><br><span class=\"line\">persons[<span class=\"string\">&quot;crl&quot;</span>] = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(persons)</span><br><span class=\"line\"><span class=\"comment\"># 改</span></span><br><span class=\"line\">persons[<span class=\"string\">&quot;liuheng&quot;</span>] = <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(persons)</span><br><span class=\"line\"><span class=\"comment\"># 删</span></span><br><span class=\"line\">persons.pop(<span class=\"string\">&quot;lucas&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(persons)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> persons.keys():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> persons.values():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> persons.items():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k + <span class=\"string\">&quot;:&quot;</span> + <span class=\"built_in\">str</span>(v))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典生成式</span></span><br><span class=\"line\">d = &#123;i: i * i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>)&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、分支结构\"><a href=\"#二、分支结构\" class=\"headerlink\" title=\"二、分支结构\"></a>二、分支结构</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件<span class=\"number\">1</span>:\t\t<span class=\"comment\">#语句后有&#x27;:&#x27; \t\t\t</span></span><br><span class=\"line\">\t...\t\t <span class=\"comment\">#语句下的代码块需与if空四个空格</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件<span class=\"number\">2</span>：</span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#例子 if.py    </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;请输入年龄：&quot;</span>)</span><br><span class=\"line\">age = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄大于18&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt; <span class=\"number\">12</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄大于12，小于18&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄小于12&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、循环结构\"><a href=\"#三、循环结构\" class=\"headerlink\" title=\"三、循环结构\"></a>三、循环结构</h3><h4 id=\"for-结构\"><a href=\"#for-结构\" class=\"headerlink\" title=\"for 结构\"></a>for 结构</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"built_in\">list</span>:\t<span class=\"comment\">#语句末尾加‘:’</span></span><br><span class=\"line\">\t...\t\t\t   <span class=\"comment\">#语句块与for 空4个空格</span></span><br><span class=\"line\">\t...\t\t\t   <span class=\"comment\">#语句块与for 空4个空格</span></span><br><span class=\"line\"><span class=\"comment\">#例子 for.py\t</span></span><br><span class=\"line\">names=[<span class=\"string\">&quot;lucas&quot;</span>, <span class=\"string\">&quot;liuhneg&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello &quot;</span>+name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">hello lucas</span><br><span class=\"line\">hello liuhneg</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"while-结构\"><a href=\"#while-结构\" class=\"headerlink\" title=\"while 结构\"></a>while 结构</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 条件:\t\t<span class=\"comment\">#语句末尾加‘:’</span></span><br><span class=\"line\">\t...\t\t\t <span class=\"comment\">#语句块与while 空4个空格</span></span><br><span class=\"line\">\t...\t\t\t <span class=\"comment\">#语句块与while 空4个空格</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#例子 while.py</span></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\">total = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    total += i</span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(total)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\"><span class=\"number\">45</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、函数\"><a href=\"#四、函数\" class=\"headerlink\" title=\"四、函数\"></a>四、函数</h3><h4 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">函数名</span>: <span class=\"comment\">#语句末尾加‘:’</span></span><br><span class=\"line\">\t...    <span class=\"comment\">#语句块与def 空4个空格</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#例子 func.py    </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y\t\t\t<span class=\"comment\">#通过return 返回结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(add(<span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h4><p>默认参数： 函数定义时给默认值，调用时如果没有传就用定义时的默认值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例子  func.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">echo</span>(<span class=\"params\">name=<span class=\"string\">&quot;liuheng&quot;</span></span>):</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\">echo()\t\t\t<span class=\"comment\"># 使用默认参数，等价于echo(&quot;liuheng&quot;)</span></span><br><span class=\"line\">echo(<span class=\"string\">&quot;lucas&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">liuheng</span><br><span class=\"line\">lucas</span><br></pre></td></tr></table></figure>\n\n<p>可变参数： 调用时可以传任意个数的参数（实际接收的是一个tuple）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例子  func.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calc</span>(<span class=\"params\">*nums</span>):\t\t<span class=\"comment\">#与普通参数不同的是多个*</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(nums))\t <span class=\"comment\">#nums 实际是个tuple</span></span><br><span class=\"line\">    s = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        s = s+num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(calc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;tuple&#x27;</span>&gt;</span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p>字典参数： 调用时传多个k-v 数据对</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例子  func.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person</span>(<span class=\"params\">**kw</span>):\t\t\t<span class=\"comment\">#与普通参数不同的是多2个*</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(kw))\t\t\t<span class=\"comment\">#kw 变量实际是个dict</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> kw.items():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(k+<span class=\"string\">&quot;:&quot;</span> + <span class=\"built_in\">str</span>(v))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">person(name=<span class=\"string\">&quot;liuheng&quot;</span>, age=<span class=\"number\">18</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;dict&#x27;</span>&gt;</span><br><span class=\"line\">name:liuheng</span><br><span class=\"line\">age:<span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 限制key, 通过*与其他参数分割，*后指定key </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">person2</span>(<span class=\"params\">*, city, job</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(city + <span class=\"string\">&quot;:&quot;</span> + job)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用是字典参数的key 只能是city,job</span></span><br><span class=\"line\">person2(city=<span class=\"string\">&quot;jx&quot;</span>, job=<span class=\"string\">&quot;rd&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># TypeError: person2() got an unexpected keyword argument &#x27;job2&#x27;</span></span><br><span class=\"line\">person2(city=<span class=\"string\">&quot;jx&quot;</span>, job2=<span class=\"string\">&quot;rd&quot;</span>)   </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 函数作为参数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hello</span>(<span class=\"params\">callback</span>):</span><br><span class=\"line\">    callback(<span class=\"string\">&quot;1122&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#匿名参数 lambda 参数: 处理逻辑</span></span><br><span class=\"line\"><span class=\"comment\">#通过lambda 定义一个匿名函数作为参数传给hello</span></span><br><span class=\"line\">hello(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">print</span>(x))   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ------装饰器------------</span></span><br><span class=\"line\"><span class=\"comment\"># 定义装饰器函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">log</span>(<span class=\"params\">func</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">wrapper</span>(<span class=\"params\">*args, **kw</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过@ 语法使用log装饰器包装echo函数</span></span><br><span class=\"line\"><span class=\"comment\"># @log 相当于做了 echo = log(echo)</span></span><br><span class=\"line\"><span class=\"meta\">@log</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">echo</span>(<span class=\"params\">name</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo(<span class=\"string\">&quot;111&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\"><span class=\"number\">1122</span></span><br><span class=\"line\">call echo():</span><br><span class=\"line\"><span class=\"number\">111</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成器-协程\"><a href=\"#生成器-协程\" class=\"headerlink\" title=\"生成器 &amp;&amp;  协程\"></a>生成器 &amp;&amp;  协程</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ----------  生成器------------</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gen</span>():</span><br><span class=\"line\">    n = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;gen before yield:&quot;</span> + <span class=\"built_in\">str</span>(n))</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> n  <span class=\"comment\">#生成器通过 yield 返回数据</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;gen after yield:&quot;</span> + <span class=\"built_in\">str</span>(n))</span><br><span class=\"line\">        n = n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(gen()))</span><br><span class=\"line\">g = gen()  <span class=\"comment\"># 函数gen()没有实际执行，只是返回一个生成器</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;before next&quot;</span>)</span><br><span class=\"line\">m = g.__next__()  <span class=\"comment\"># 调用生成器的next 方法将触发gen() 函数执行，直到yield指令停止</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;after next&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;before next2&quot;</span>)</span><br><span class=\"line\">m = g.__next__()  <span class=\"comment\"># 从上次停止的地方继续开始执行，直到yield指令</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;after next2&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;generator&#x27;</span>&gt;</span><br><span class=\"line\">before <span class=\"built_in\">next</span></span><br><span class=\"line\">gen before <span class=\"keyword\">yield</span>:<span class=\"number\">0</span></span><br><span class=\"line\">after <span class=\"built_in\">next</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\">before next2</span><br><span class=\"line\">gen after <span class=\"keyword\">yield</span>:<span class=\"number\">0</span></span><br><span class=\"line\">gen before <span class=\"keyword\">yield</span>:<span class=\"number\">1</span></span><br><span class=\"line\">after next2</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基于生成器实现协程， 生产者-消费者</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">consumer</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;consumer start....&quot;</span>)</span><br><span class=\"line\">    r = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        n = <span class=\"keyword\">yield</span> r</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;consumer..........&quot;</span> + <span class=\"built_in\">str</span>(n))</span><br><span class=\"line\">        r = n*n</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">produce</span>(<span class=\"params\">c</span>):</span><br><span class=\"line\">    c.send(<span class=\"literal\">None</span>)</span><br><span class=\"line\">    n = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">        n = n + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;produce...........&quot;</span> + <span class=\"built_in\">str</span>(n))</span><br><span class=\"line\">        r = c.send(n)\t<span class=\"comment\">#send 功能等价于__next__, 不同的是参数可以传递给上一个yield的返回值</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(r)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">produce(consumer())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">consumer start....</span><br><span class=\"line\">produce..........<span class=\"number\">.1</span></span><br><span class=\"line\">consumer.........<span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">produce..........<span class=\"number\">.2</span></span><br><span class=\"line\">consumer.........<span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">produce..........<span class=\"number\">.3</span></span><br><span class=\"line\">consumer.........<span class=\"number\">.3</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\">produce..........<span class=\"number\">.4</span></span><br><span class=\"line\">consumer.........<span class=\"number\">.4</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\">produce..........<span class=\"number\">.5</span></span><br><span class=\"line\">consumer.........<span class=\"number\">.5</span></span><br><span class=\"line\"><span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、IO\"><a href=\"#五、IO\" class=\"headerlink\" title=\"五、IO\"></a>五、IO</h3><h4 id=\"输入、输出\"><a href=\"#输入、输出\" class=\"headerlink\" title=\"输入、输出\"></a>输入、输出</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例子 input.py</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;请输入：&quot;</span>)</span><br><span class=\"line\">age = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(age))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(age)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">请输入：</span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\">&lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;str&#x27;</span>&gt;</span><br><span class=\"line\"><span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;io.py&quot;</span>, <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(line)</span><br><span class=\"line\">f.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加异常处理 </span></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;io.py&quot;</span>, <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(line)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> f:</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 语法糖 with 自动关闭文件</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;io.py&quot;</span>, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">  <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines():  </span><br><span class=\"line\">      <span class=\"built_in\">print</span>(line)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"异步IO\"><a href=\"#异步IO\" class=\"headerlink\" title=\"异步IO\"></a>异步IO</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">hello</span>():</span><br><span class=\"line\">    <span class=\"comment\"># print(datetime.now())</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"comment\"># print(datetime.now())</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(datetime.now())</span><br><span class=\"line\"><span class=\"comment\"># 并行执行2个task(hello())</span></span><br><span class=\"line\">loop.run_until_complete(asyncio.wait([hello(), hello()]))</span><br><span class=\"line\">loop.close()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(datetime.now())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"六、模块\"><a href=\"#六、模块\" class=\"headerlink\" title=\"六、模块\"></a>六、模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os\t <span class=\"comment\"># 通过import 导入模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.name)</span><br><span class=\"line\"><span class=\"comment\"># print(os.uname())</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(os.environ)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"七、面向对象\"><a href=\"#七、面向对象\" class=\"headerlink\" title=\"七、面向对象\"></a>七、面向对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义Animal 类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>(<span class=\"title class_ inherited__\">object</span>):     <span class=\"comment\">#class 类名(基类)：</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">echo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Animal&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  定义Dog 类继承自Animal</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>(<span class=\"title class_ inherited__\">Animal</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):\t<span class=\"comment\"># 构造函数</span></span><br><span class=\"line\">        self.__name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">echo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dog-&quot;</span> + self.__name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  定义Cat 类继承自Animal</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span>(<span class=\"title class_ inherited__\">Animal</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.__name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">echo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Cat-&quot;</span> + self.__name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">animal = Dog(<span class=\"string\">&quot;wongwong&quot;</span>)   <span class=\"comment\">#创建对象 </span></span><br><span class=\"line\">animal.echo()</span><br><span class=\"line\"></span><br><span class=\"line\">animal = Cat(<span class=\"string\">&quot;miaomiao&quot;</span>)</span><br><span class=\"line\">animal.echo()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  @property 定义属性, 实现setter、getter</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.__name = name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">name</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @name.setter</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">name</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.__name = value</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p = Person(<span class=\"string\">&quot;liuheng&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p.name)          <span class=\"comment\"># 像访问成员变量一样访问属性，等价于调用 p.name()</span></span><br><span class=\"line\">p.name = <span class=\"string\">&quot;lucas&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(p.name)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"八、错误处理\"><a href=\"#八、错误处理\" class=\"headerlink\" title=\"八、错误处理\"></a>八、错误处理</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># try ... except ... finally 语句捕获异常</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">err</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"number\">10</span> / a</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;except&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;finally&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">err(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">None</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;io0000.py&quot;</span>, <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(line)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> f:</span><br><span class=\"line\">        f.close()</span><br></pre></td></tr></table></figure>\n\n"},{"title":"docker tutorial","date":"2023-12-09T11:10:23.000Z","_content":"<!-- more -->\n\n# 镜像管理\n\n- [拉取镜像](https://docs.docker.com/engine/reference/commandline/pull/)\n\n```shell\ndokcer pull {镜像名}:{tag}\n```\n\n其中 tag 可以没有, 默认为 latest, `docker pull centos` 等价与 `docker pull centos:latest`\n\n- [删除镜像](https://docs.docker.com/engine/reference/commandline/rmi/)\n\n```shell\ndocker rmi {镜像名}:{tag} Or {镜像Id}\n```\n\n- [查看镜像](https://docs.docker.com/engine/reference/commandline/images/)\n\n```shell\n # 列出本机镜像\n docker images\n # 查看指定镜像的元数据\n docker inspect {镜像名}:{tag} Or {镜像Id}\n```\n\n- [构建镜像](https://docs.docker.com/engine/reference/commandline/build/)\n\n```shell\ndocker build -t {镜像名}:{tag} -f {Dokcerfile文件路径} .\n```\n\n[Dockerfile](https://docs.docker.com/engine/reference/builder/)\n\n文件格式:{指令} {参数}\n常用指令:\n\n- FROM: 指定父镜像，基于该父镜像修改构建新镜像\n\n- RUN: 构建时在镜像中执行的指令\n\n- ADD: 添加文件到镜像\n\n- COPY: 与ADD 类似, 不同的是不支持源为 url\n\n- CMD:用来指定容器启动时用到的命令,只能有一条\n\n- ENTRYPOINT: 与CMD类似, CMD 是可以被 docker run 指令覆盖的，而 ENTRYPOINT 不能覆盖\n\n- ENV: 自定义设置容器的环境变量\n\n- EXPOSE:用来暴露端口\n\n```dockerfile\n## Set the base image to CentOS  基于centos镜像\nFROM centos\n# File Author / Maintainer  作者信息\nMAINTAINER test test@example.com\n# Install necessary tools  安装一些依赖的包\nRUN yum install -y pcre-devel wget net-tools gcc zlib zlib-devel make openssl-devel\n# Install Nginx  安装nginx\nADD http://nginx.org/download/nginx-1.8.0.tar.gz .  # 添加nginx的压缩包到当前目录下\nRUN tar zxvf nginx-1.8.0.tar.gz  # 解包\nRUN mkdir -p /usr/local/nginx  # 创建nginx目录\nRUN cd nginx-1.8.0 && ./configure --prefix=/usr/local/nginx && make && make install  # 编译安装\nRUN rm -fv /usr/local/nginx/conf/nginx.conf  # 删除自带的nginx配置文件\nADD http://www.apelearn.com/study_v2/.nginx_conf /usr/local/nginx/conf/nginx.conf  # 添加nginx配置文件\n# Expose ports  开放80端口出来\nEXPOSE 80\n# Set the default command to execute when creating a new container  这里是因为防止服务启动后容器会停止的情况，所以需要多执行一句tail命令\nENTRYPOINT /usr/local/nginx/sbin/nginx && tail -f /etc/passwd\n```\n\n# 容器管理\n\n- [创建容器](https://docs.docker.com/engine/reference/commandline/run/)\n\n```shell\ndocker run [选项参数] {镜像名 Or 镜像 ID} [命令]\n```\n\n常用选项参数:\n\n- -d: 后台运行容器，并返回容器 ID\n- -p: 指定端口映射，格式为: 宿主机端口:容器端口\n- -v: 目录映射，格式为: 宿主机目录:容器目录\n- -i: 以交互模式运行容器，通常与-t 同时使用\n- -t: 为容器重新分配一个伪输入终端，通常与-i 同时使用\n- --link: 指定关联容器, --link 实际是在 /etc/hosts 添加了一条记录\n- --name: 指定容器名\n- --network: 指定容器网络\n\n```shell\n$ docker run -itd --name node1 centos /bin/bash\n$ docker run -itd --name node2 --link node1 centos /bin/bash\n$ docker exec -it node2 cat /etc/hosts\n172.17.0.3 node1 5bdc55fc59e1\n172.17.0.4 d67460c5c4a4\n$ docker exec -it node1 ip addr\n...\ninet 172.17.0.3/16 brd 172.17.255.255 scope global eth0\n```\n\n在容器中运行命令: `docker -it exec {容器} {命令}`\n\n- [删除容器](https://docs.docker.com/engine/reference/commandline/rm/)\n\n```shell\ndocker rm {容器名 Or 容器 id}\n```\n\n- [查看容器](https://docs.docker.com/engine/reference/commandline/ps/)\n\n```shell\ndocker ps [-a]\nps 默认查看正在运行的容器，-a 查看所有容器\ndocker inspect {容器名 Or 容器 ID}\ninspect 查看容器的元数据\n```\n\n- [停止容器](https://docs.docker.com/engine/reference/commandline/stop/)\n\n```shell\n  docker stop {容器名 Or 容器 ID}\n```\n\n- [启动容器](https://docs.docker.com/engine/reference/commandline/start/)\n\n```shell\n  docker start {容器名 Or 容器 ID}\n```\n\n# [容器网络](https://docs.docker.com/network/)\n\n### 网络类型\n\n| 驱动类型 | 说明                                                         |\n| -------- | ------------------------------------------------------------ |\n| null     | 不创建网络，--network none，安装后默认有个null类型的网络名叫 'none' ， 仅有一个 |\n| host     | 与宿主机共享网络, --network host，安装后默认有个host 驱动类型的网络名叫 'host'， 仅有一个 |\n| bridge   | 通过桥接的方式连接，--network bridge，安装后默认有个bridge 驱动类型的网络名叫 'bridge' |\n| overlay  | 跨主机容器间通信                                             |\n\n```shell\n$ docker network ls\nNETWORK ID     NAME          DRIVER    SCOPE\n1876394273c5   bridge        bridge    local\n2e66029c7c78   host          host      local\n49423498220b   none          null      local\n$docker network create --driver null none2\nError response from daemon: only one instance of \"null\" network is allowed\n$ docker network create --driver host host2\nError response from daemon: only one instance of \"host\" network is allowed\n```\n\n### [网络管理](https://docs.docker.com/engine/reference/commandline/network/)\n\n- [查看](https://docs.docker.com/engine/reference/commandline/network_ls/)  ```docker network ls``` 、 ``` docker network inspect```\n- [创建](https://docs.docker.com/engine/reference/commandline/network_create/) ```docker network create```\n- [删除](https://docs.docker.com/engine/reference/commandline/network_rm/)  ```docker network rm```\n\n# docker 容器核心技术\n\n1. Namespace\n\n   Namespace 是一种 Linux Kernel 提供的资源隔离方案:\n\n   - 系统可以为进程分配不同的 Namespace\n   - 并保证不同的 Namespace 资源独立分配、进程彼此隔离，即不同的 Namespace 下的进 程互不干扰\n\n   Namespace 常用操作:\n\n   - 查看当前系统的 namespace：lsns –t {type}\n   - 查看某进程的 namespace：ls -la /proc/{pid}/ns/\n   - 进入某进程的 namespace：nsenter -t {pid} -n ip addr\n\n   Namespace 实验练习:\n\n```shell\n# 在新 network namespace 执行 sleep 指令\n$ unshare -fn sleep 60\n# 查看进程信息\n$ ps -ef|grep sleep\nroot 32882 4935 0 10:00 pts/0 00:00:00 unshare -fn sleep 60\n# 查看网络 Namespace\n$ lsns -t net\n4026532508 net 2 32882 root unassigned unshare #新增一条 net Namespace\n# 进入该进程所在 Namespace 查看网络配置，与主机不一致\n$ nsenter -t 32882 -n ip a\n1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1000\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n```\n\n命令参考 [lsns](https://man7.org/linux/man-pages/man8/lsns.8.html)、[unshare](https://man7.org/linux/man-pages/man1/unshare.1.html)、[nsenter](https://man7.org/linux/man-pages/man1/nsenter.1.html)\n\n2. Cgroups\n\n   Cgroups(Control Groups) 是 Linux 下用于对一个或一组进程进行资源控制和监控的机制:\n\n   - 可以对诸如 CPU 使用时间、内存、磁盘 I/O 等进程所需的资源进行限制\n   - 不同资源的具体管理工作由相应的 Cgroup 子系统（Subsystem）来实现\n   - 针对不同类型的资源限制，只要将限制策略在不同的的子系统上进行关联即可\n   - Cgroups 在不同的系统资源管理子系统中以层级树（Hierarchy）的方式来组织管理：每个 Cgroup 都可以包含其他的子 Cgroup，因此子 Cgroup 能使用的资源除了受本 Cgroup 配置的资源参数限制，还受到父 Cgroup 设置的资源限制\n\n   Cgroups 实验练习:\n\n```shell\n#在 cgroup cpu 子系统目录中新建cpudemo目录，或者使用 cgcreate cpu:cpudemo\n$ cd /sys/fs/cgroup/cpu\n$ mkdir cpudemo\n$ cd cpudemo\n$ ll\n...\n-rw-r--r--. 1 root root 0 Oct 20 11:23 cpu.cfs_period_us\n-rw-r--r--. 1 root root 0 Oct 20 11:23 cpu.cfs_quota_us\n# 编写 busyloop.sh 死循环程序\n# cat busyloop.sh\n#!/bin/bash\nwhile :\ndo :\n# 运行 busyloop\n$ ./busyloop.sh\n# 执行 top 查看 CPU 使用情况，CPU 占用 100%\n# 通过 cgroup 限制 CPU\n$ cd /sys/fs/cgroup/cpu/cpudemo\n# 把进程添加到 cgroup 进程配置组，将pid 写到cgroup.procs 或者使用 cgclassify -g cpu:cpudemo pid\n$ echo ps -ef|grep busyloop|grep -v grep|awk '{print $2}' > cgroup.procs\n# 设置 cpuquota\n$ echo 50000 > cpu.cfs_quota_us\n# 执行 top 查看 CPU 使用情况，CPU 占用变为 50%(cpu.cfs_quota_us/cpu.cfs_period_us)\n```\n\n参考命令: [cgcreate](https://linux.die.net/man/1/cgcreate)、[cgclassify](https://linux.die.net/man/1/cgclassify) \n\nCPU 子系统\n\n- cpu.cfs_period_us: cfs_period_us 用来配置时间周期长度，单位为 us（微秒）\n- cpu.cfs_quota_us: cfs_quota_us 用来配置当前 Cgroup 在 cfs_period_us 时间内最多能使用的 CPU 时间数，单位为 us（微秒）\n- cpu.stat: Cgroup 内的进程使用的 CPU 时间统计\n- nr_periods: 经过 cpu.cfs_period_us 的时间周期数量\n- nr_throttled: 在经过的周期内，有多少次因为进程在指定的时间周期内用光了配额时间而受到限制\n- throttled_time: Cgroup 中的进程被限制使用 CPU 的总用时，单位是 ns（纳秒）\n\n3. Union FS(联合文件系统)\n\n   - 将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)的文件系统\n   - 支持为每一个成员目录(类似 Git Branch)设定 readonly、readwrite 和 whiteout-able 权限\n   - 文件系统分层, 对 readonly 权限的 branch 可以逻辑上进行修改(增量地, 不影响 readonly 部分的)\n   - 通常 Union FS 有两个用途, 一方面可以将多个 disk 挂到同一个目录下, 另一个更常用的就是将一个 readonly 的 branch 和一个 writeable 的 branch 联合在一起\n\n   OverlayFS 是一种联合文件系统，同样属于文件级的存储驱动，包含了最初的 Overlay 和更新更稳定的 overlay2。Overlay 只有两层: upper 层和 Lower 层，Lower 层代表镜像层，upper 层代表容器可写层。\n   ![ufs.png](https://i.loli.net/2021/10/20/QvfVziFsxHIe7aW.png)\n\n  Union FS 实验练习:\n\n```shell\n$ mkdir upper lower merged work\n$ echo \"from lower\" > lower/in_lower.txt\n$ echo \"from upper\" > upper/in_upper.txt\n$ echo \"from lower\" > lower/in_both.txt\n$ echo \"from upper\" > upper/in_both.txt\n$ sudo mount -t overlay overlay -o lowerdir=`pwd`/lower,upperdir=`pwd`/upper,workdir=`pwd`/work `pwd`/merged\n$ cat merged/in_both.txt\n from upper\n```","source":"_posts/docker-tutorial.md","raw":"---\ntitle: docker tutorial\ndate: 2023-12-09 19:10:23\ntags: [docker, linux]\n---\n<!-- more -->\n\n# 镜像管理\n\n- [拉取镜像](https://docs.docker.com/engine/reference/commandline/pull/)\n\n```shell\ndokcer pull {镜像名}:{tag}\n```\n\n其中 tag 可以没有, 默认为 latest, `docker pull centos` 等价与 `docker pull centos:latest`\n\n- [删除镜像](https://docs.docker.com/engine/reference/commandline/rmi/)\n\n```shell\ndocker rmi {镜像名}:{tag} Or {镜像Id}\n```\n\n- [查看镜像](https://docs.docker.com/engine/reference/commandline/images/)\n\n```shell\n # 列出本机镜像\n docker images\n # 查看指定镜像的元数据\n docker inspect {镜像名}:{tag} Or {镜像Id}\n```\n\n- [构建镜像](https://docs.docker.com/engine/reference/commandline/build/)\n\n```shell\ndocker build -t {镜像名}:{tag} -f {Dokcerfile文件路径} .\n```\n\n[Dockerfile](https://docs.docker.com/engine/reference/builder/)\n\n文件格式:{指令} {参数}\n常用指令:\n\n- FROM: 指定父镜像，基于该父镜像修改构建新镜像\n\n- RUN: 构建时在镜像中执行的指令\n\n- ADD: 添加文件到镜像\n\n- COPY: 与ADD 类似, 不同的是不支持源为 url\n\n- CMD:用来指定容器启动时用到的命令,只能有一条\n\n- ENTRYPOINT: 与CMD类似, CMD 是可以被 docker run 指令覆盖的，而 ENTRYPOINT 不能覆盖\n\n- ENV: 自定义设置容器的环境变量\n\n- EXPOSE:用来暴露端口\n\n```dockerfile\n## Set the base image to CentOS  基于centos镜像\nFROM centos\n# File Author / Maintainer  作者信息\nMAINTAINER test test@example.com\n# Install necessary tools  安装一些依赖的包\nRUN yum install -y pcre-devel wget net-tools gcc zlib zlib-devel make openssl-devel\n# Install Nginx  安装nginx\nADD http://nginx.org/download/nginx-1.8.0.tar.gz .  # 添加nginx的压缩包到当前目录下\nRUN tar zxvf nginx-1.8.0.tar.gz  # 解包\nRUN mkdir -p /usr/local/nginx  # 创建nginx目录\nRUN cd nginx-1.8.0 && ./configure --prefix=/usr/local/nginx && make && make install  # 编译安装\nRUN rm -fv /usr/local/nginx/conf/nginx.conf  # 删除自带的nginx配置文件\nADD http://www.apelearn.com/study_v2/.nginx_conf /usr/local/nginx/conf/nginx.conf  # 添加nginx配置文件\n# Expose ports  开放80端口出来\nEXPOSE 80\n# Set the default command to execute when creating a new container  这里是因为防止服务启动后容器会停止的情况，所以需要多执行一句tail命令\nENTRYPOINT /usr/local/nginx/sbin/nginx && tail -f /etc/passwd\n```\n\n# 容器管理\n\n- [创建容器](https://docs.docker.com/engine/reference/commandline/run/)\n\n```shell\ndocker run [选项参数] {镜像名 Or 镜像 ID} [命令]\n```\n\n常用选项参数:\n\n- -d: 后台运行容器，并返回容器 ID\n- -p: 指定端口映射，格式为: 宿主机端口:容器端口\n- -v: 目录映射，格式为: 宿主机目录:容器目录\n- -i: 以交互模式运行容器，通常与-t 同时使用\n- -t: 为容器重新分配一个伪输入终端，通常与-i 同时使用\n- --link: 指定关联容器, --link 实际是在 /etc/hosts 添加了一条记录\n- --name: 指定容器名\n- --network: 指定容器网络\n\n```shell\n$ docker run -itd --name node1 centos /bin/bash\n$ docker run -itd --name node2 --link node1 centos /bin/bash\n$ docker exec -it node2 cat /etc/hosts\n172.17.0.3 node1 5bdc55fc59e1\n172.17.0.4 d67460c5c4a4\n$ docker exec -it node1 ip addr\n...\ninet 172.17.0.3/16 brd 172.17.255.255 scope global eth0\n```\n\n在容器中运行命令: `docker -it exec {容器} {命令}`\n\n- [删除容器](https://docs.docker.com/engine/reference/commandline/rm/)\n\n```shell\ndocker rm {容器名 Or 容器 id}\n```\n\n- [查看容器](https://docs.docker.com/engine/reference/commandline/ps/)\n\n```shell\ndocker ps [-a]\nps 默认查看正在运行的容器，-a 查看所有容器\ndocker inspect {容器名 Or 容器 ID}\ninspect 查看容器的元数据\n```\n\n- [停止容器](https://docs.docker.com/engine/reference/commandline/stop/)\n\n```shell\n  docker stop {容器名 Or 容器 ID}\n```\n\n- [启动容器](https://docs.docker.com/engine/reference/commandline/start/)\n\n```shell\n  docker start {容器名 Or 容器 ID}\n```\n\n# [容器网络](https://docs.docker.com/network/)\n\n### 网络类型\n\n| 驱动类型 | 说明                                                         |\n| -------- | ------------------------------------------------------------ |\n| null     | 不创建网络，--network none，安装后默认有个null类型的网络名叫 'none' ， 仅有一个 |\n| host     | 与宿主机共享网络, --network host，安装后默认有个host 驱动类型的网络名叫 'host'， 仅有一个 |\n| bridge   | 通过桥接的方式连接，--network bridge，安装后默认有个bridge 驱动类型的网络名叫 'bridge' |\n| overlay  | 跨主机容器间通信                                             |\n\n```shell\n$ docker network ls\nNETWORK ID     NAME          DRIVER    SCOPE\n1876394273c5   bridge        bridge    local\n2e66029c7c78   host          host      local\n49423498220b   none          null      local\n$docker network create --driver null none2\nError response from daemon: only one instance of \"null\" network is allowed\n$ docker network create --driver host host2\nError response from daemon: only one instance of \"host\" network is allowed\n```\n\n### [网络管理](https://docs.docker.com/engine/reference/commandline/network/)\n\n- [查看](https://docs.docker.com/engine/reference/commandline/network_ls/)  ```docker network ls``` 、 ``` docker network inspect```\n- [创建](https://docs.docker.com/engine/reference/commandline/network_create/) ```docker network create```\n- [删除](https://docs.docker.com/engine/reference/commandline/network_rm/)  ```docker network rm```\n\n# docker 容器核心技术\n\n1. Namespace\n\n   Namespace 是一种 Linux Kernel 提供的资源隔离方案:\n\n   - 系统可以为进程分配不同的 Namespace\n   - 并保证不同的 Namespace 资源独立分配、进程彼此隔离，即不同的 Namespace 下的进 程互不干扰\n\n   Namespace 常用操作:\n\n   - 查看当前系统的 namespace：lsns –t {type}\n   - 查看某进程的 namespace：ls -la /proc/{pid}/ns/\n   - 进入某进程的 namespace：nsenter -t {pid} -n ip addr\n\n   Namespace 实验练习:\n\n```shell\n# 在新 network namespace 执行 sleep 指令\n$ unshare -fn sleep 60\n# 查看进程信息\n$ ps -ef|grep sleep\nroot 32882 4935 0 10:00 pts/0 00:00:00 unshare -fn sleep 60\n# 查看网络 Namespace\n$ lsns -t net\n4026532508 net 2 32882 root unassigned unshare #新增一条 net Namespace\n# 进入该进程所在 Namespace 查看网络配置，与主机不一致\n$ nsenter -t 32882 -n ip a\n1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1000\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n```\n\n命令参考 [lsns](https://man7.org/linux/man-pages/man8/lsns.8.html)、[unshare](https://man7.org/linux/man-pages/man1/unshare.1.html)、[nsenter](https://man7.org/linux/man-pages/man1/nsenter.1.html)\n\n2. Cgroups\n\n   Cgroups(Control Groups) 是 Linux 下用于对一个或一组进程进行资源控制和监控的机制:\n\n   - 可以对诸如 CPU 使用时间、内存、磁盘 I/O 等进程所需的资源进行限制\n   - 不同资源的具体管理工作由相应的 Cgroup 子系统（Subsystem）来实现\n   - 针对不同类型的资源限制，只要将限制策略在不同的的子系统上进行关联即可\n   - Cgroups 在不同的系统资源管理子系统中以层级树（Hierarchy）的方式来组织管理：每个 Cgroup 都可以包含其他的子 Cgroup，因此子 Cgroup 能使用的资源除了受本 Cgroup 配置的资源参数限制，还受到父 Cgroup 设置的资源限制\n\n   Cgroups 实验练习:\n\n```shell\n#在 cgroup cpu 子系统目录中新建cpudemo目录，或者使用 cgcreate cpu:cpudemo\n$ cd /sys/fs/cgroup/cpu\n$ mkdir cpudemo\n$ cd cpudemo\n$ ll\n...\n-rw-r--r--. 1 root root 0 Oct 20 11:23 cpu.cfs_period_us\n-rw-r--r--. 1 root root 0 Oct 20 11:23 cpu.cfs_quota_us\n# 编写 busyloop.sh 死循环程序\n# cat busyloop.sh\n#!/bin/bash\nwhile :\ndo :\n# 运行 busyloop\n$ ./busyloop.sh\n# 执行 top 查看 CPU 使用情况，CPU 占用 100%\n# 通过 cgroup 限制 CPU\n$ cd /sys/fs/cgroup/cpu/cpudemo\n# 把进程添加到 cgroup 进程配置组，将pid 写到cgroup.procs 或者使用 cgclassify -g cpu:cpudemo pid\n$ echo ps -ef|grep busyloop|grep -v grep|awk '{print $2}' > cgroup.procs\n# 设置 cpuquota\n$ echo 50000 > cpu.cfs_quota_us\n# 执行 top 查看 CPU 使用情况，CPU 占用变为 50%(cpu.cfs_quota_us/cpu.cfs_period_us)\n```\n\n参考命令: [cgcreate](https://linux.die.net/man/1/cgcreate)、[cgclassify](https://linux.die.net/man/1/cgclassify) \n\nCPU 子系统\n\n- cpu.cfs_period_us: cfs_period_us 用来配置时间周期长度，单位为 us（微秒）\n- cpu.cfs_quota_us: cfs_quota_us 用来配置当前 Cgroup 在 cfs_period_us 时间内最多能使用的 CPU 时间数，单位为 us（微秒）\n- cpu.stat: Cgroup 内的进程使用的 CPU 时间统计\n- nr_periods: 经过 cpu.cfs_period_us 的时间周期数量\n- nr_throttled: 在经过的周期内，有多少次因为进程在指定的时间周期内用光了配额时间而受到限制\n- throttled_time: Cgroup 中的进程被限制使用 CPU 的总用时，单位是 ns（纳秒）\n\n3. Union FS(联合文件系统)\n\n   - 将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)的文件系统\n   - 支持为每一个成员目录(类似 Git Branch)设定 readonly、readwrite 和 whiteout-able 权限\n   - 文件系统分层, 对 readonly 权限的 branch 可以逻辑上进行修改(增量地, 不影响 readonly 部分的)\n   - 通常 Union FS 有两个用途, 一方面可以将多个 disk 挂到同一个目录下, 另一个更常用的就是将一个 readonly 的 branch 和一个 writeable 的 branch 联合在一起\n\n   OverlayFS 是一种联合文件系统，同样属于文件级的存储驱动，包含了最初的 Overlay 和更新更稳定的 overlay2。Overlay 只有两层: upper 层和 Lower 层，Lower 层代表镜像层，upper 层代表容器可写层。\n   ![ufs.png](https://i.loli.net/2021/10/20/QvfVziFsxHIe7aW.png)\n\n  Union FS 实验练习:\n\n```shell\n$ mkdir upper lower merged work\n$ echo \"from lower\" > lower/in_lower.txt\n$ echo \"from upper\" > upper/in_upper.txt\n$ echo \"from lower\" > lower/in_both.txt\n$ echo \"from upper\" > upper/in_both.txt\n$ sudo mount -t overlay overlay -o lowerdir=`pwd`/lower,upperdir=`pwd`/upper,workdir=`pwd`/work `pwd`/merged\n$ cat merged/in_both.txt\n from upper\n```","slug":"docker-tutorial","published":1,"updated":"2023-12-09T12:36:43.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpy20kxg0001kksi6zoe2f3u","content":"<span id=\"more\"></span>\n\n<h1 id=\"镜像管理\"><a href=\"#镜像管理\" class=\"headerlink\" title=\"镜像管理\"></a>镜像管理</h1><ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/pull/\">拉取镜像</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer pull &#123;镜像名&#125;:&#123;tag&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 tag 可以没有, 默认为 latest, <code>docker pull centos</code> 等价与 <code>docker pull centos:latest</code></p>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/rmi/\">删除镜像</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi &#123;镜像名&#125;:&#123;tag&#125; Or &#123;镜像Id&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/images/\">查看镜像</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">列出本机镜像</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定镜像的元数据</span></span><br><span class=\"line\">docker inspect &#123;镜像名&#125;:&#123;tag&#125; Or &#123;镜像Id&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/build/\">构建镜像</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t &#123;镜像名&#125;:&#123;tag&#125; -f &#123;Dokcerfile文件路径&#125; .</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.docker.com/engine/reference/builder/\">Dockerfile</a></p>\n<p>文件格式:{指令} {参数}<br>常用指令:</p>\n<ul>\n<li><p>FROM: 指定父镜像，基于该父镜像修改构建新镜像</p>\n</li>\n<li><p>RUN: 构建时在镜像中执行的指令</p>\n</li>\n<li><p>ADD: 添加文件到镜像</p>\n</li>\n<li><p>COPY: 与ADD 类似, 不同的是不支持源为 url</p>\n</li>\n<li><p>CMD:用来指定容器启动时用到的命令,只能有一条</p>\n</li>\n<li><p>ENTRYPOINT: 与CMD类似, CMD 是可以被 docker run 指令覆盖的，而 ENTRYPOINT 不能覆盖</p>\n</li>\n<li><p>ENV: 自定义设置容器的环境变量</p>\n</li>\n<li><p>EXPOSE:用来暴露端口</p>\n</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Set the base image to CentOS  基于centos镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> centos</span><br><span class=\"line\"><span class=\"comment\"># File Author / Maintainer  作者信息</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> test test@example.com</span><br><span class=\"line\"><span class=\"comment\"># Install necessary tools  安装一些依赖的包</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum install -y pcre-devel wget net-tools gcc zlib zlib-devel make openssl-devel</span></span><br><span class=\"line\"><span class=\"comment\"># Install Nginx  安装nginx</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> http://nginx.org/download/nginx-1.8.0.tar.gz .  <span class=\"comment\"># 添加nginx的压缩包到当前目录下</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> tar zxvf nginx-1.8.0.tar.gz  <span class=\"comment\"># 解包</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> -p /usr/local/nginx  <span class=\"comment\"># 创建nginx目录</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">cd</span> nginx-1.8.0 &amp;&amp; ./configure --prefix=/usr/local/nginx &amp;&amp; make &amp;&amp; make install  <span class=\"comment\"># 编译安装</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">rm</span> -fv /usr/local/nginx/conf/nginx.conf  <span class=\"comment\"># 删除自带的nginx配置文件</span></span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> http://www.apelearn.com/study_v2/.nginx_conf /usr/local/nginx/conf/nginx.conf  <span class=\"comment\"># 添加nginx配置文件</span></span></span><br><span class=\"line\"><span class=\"comment\"># Expose ports  开放80端口出来</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># Set the default command to execute when creating a new container  这里是因为防止服务启动后容器会停止的情况，所以需要多执行一句tail命令</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> /usr/local/nginx/sbin/nginx &amp;&amp; <span class=\"built_in\">tail</span> -f /etc/passwd</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"容器管理\"><a href=\"#容器管理\" class=\"headerlink\" title=\"容器管理\"></a>容器管理</h1><ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/run/\">创建容器</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [选项参数] &#123;镜像名 Or 镜像 ID&#125; [命令]</span><br></pre></td></tr></table></figure>\n\n<p>常用选项参数:</p>\n<ul>\n<li>-d: 后台运行容器，并返回容器 ID</li>\n<li>-p: 指定端口映射，格式为: 宿主机端口:容器端口</li>\n<li>-v: 目录映射，格式为: 宿主机目录:容器目录</li>\n<li>-i: 以交互模式运行容器，通常与-t 同时使用</li>\n<li>-t: 为容器重新分配一个伪输入终端，通常与-i 同时使用</li>\n<li>–link: 指定关联容器, –link 实际是在 &#x2F;etc&#x2F;hosts 添加了一条记录</li>\n<li>–name: 指定容器名</li>\n<li>–network: 指定容器网络</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker run -itd --name node1 centos /bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker run -itd --name node2 --<span class=\"built_in\">link</span> node1 centos /bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker <span class=\"built_in\">exec</span> -it node2 <span class=\"built_in\">cat</span> /etc/hosts</span></span><br><span class=\"line\">172.17.0.3 node1 5bdc55fc59e1</span><br><span class=\"line\">172.17.0.4 d67460c5c4a4</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker <span class=\"built_in\">exec</span> -it node1 ip addr</span></span><br><span class=\"line\">...</span><br><span class=\"line\">inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br></pre></td></tr></table></figure>\n\n<p>在容器中运行命令: <code>docker -it exec &#123;容器&#125; &#123;命令&#125;</code></p>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/rm/\">删除容器</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm &#123;容器名 Or 容器 id&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/ps/\">查看容器</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps [-a]</span><br><span class=\"line\">ps 默认查看正在运行的容器，-a 查看所有容器</span><br><span class=\"line\">docker inspect &#123;容器名 Or 容器 ID&#125;</span><br><span class=\"line\">inspect 查看容器的元数据</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/stop/\">停止容器</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop &#123;容器名 Or 容器 ID&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/start/\">启动容器</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start &#123;容器名 Or 容器 ID&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"容器网络\"><a href=\"#容器网络\" class=\"headerlink\" title=\"容器网络\"></a><a href=\"https://docs.docker.com/network/\">容器网络</a></h1><h3 id=\"网络类型\"><a href=\"#网络类型\" class=\"headerlink\" title=\"网络类型\"></a>网络类型</h3><table>\n<thead>\n<tr>\n<th>驱动类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>null</td>\n<td>不创建网络，–network none，安装后默认有个null类型的网络名叫 ‘none’ ， 仅有一个</td>\n</tr>\n<tr>\n<td>host</td>\n<td>与宿主机共享网络, –network host，安装后默认有个host 驱动类型的网络名叫 ‘host’， 仅有一个</td>\n</tr>\n<tr>\n<td>bridge</td>\n<td>通过桥接的方式连接，–network bridge，安装后默认有个bridge 驱动类型的网络名叫 ‘bridge’</td>\n</tr>\n<tr>\n<td>overlay</td>\n<td>跨主机容器间通信</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker network <span class=\"built_in\">ls</span></span></span><br><span class=\"line\">NETWORK ID     NAME          DRIVER    SCOPE</span><br><span class=\"line\">1876394273c5   bridge        bridge    local</span><br><span class=\"line\">2e66029c7c78   host          host      local</span><br><span class=\"line\">49423498220b   none          null      local</span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">docker network create --driver null none2</span></span><br><span class=\"line\">Error response from daemon: only one instance of &quot;null&quot; network is allowed</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker network create --driver host host2</span></span><br><span class=\"line\">Error response from daemon: only one instance of &quot;host&quot; network is allowed</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网络管理\"><a href=\"#网络管理\" class=\"headerlink\" title=\"网络管理\"></a><a href=\"https://docs.docker.com/engine/reference/commandline/network/\">网络管理</a></h3><ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/network_ls/\">查看</a>  <code>docker network ls</code> 、 <code> docker network inspect</code></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/network_create/\">创建</a> <code>docker network create</code></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/network_rm/\">删除</a>  <code>docker network rm</code></li>\n</ul>\n<h1 id=\"docker-容器核心技术\"><a href=\"#docker-容器核心技术\" class=\"headerlink\" title=\"docker 容器核心技术\"></a>docker 容器核心技术</h1><ol>\n<li><p>Namespace</p>\n<p>Namespace 是一种 Linux Kernel 提供的资源隔离方案:</p>\n<ul>\n<li>系统可以为进程分配不同的 Namespace</li>\n<li>并保证不同的 Namespace 资源独立分配、进程彼此隔离，即不同的 Namespace 下的进 程互不干扰</li>\n</ul>\n<p>Namespace 常用操作:</p>\n<ul>\n<li>查看当前系统的 namespace：lsns –t {type}</li>\n<li>查看某进程的 namespace：ls -la &#x2F;proc&#x2F;{pid}&#x2F;ns&#x2F;</li>\n<li>进入某进程的 namespace：nsenter -t {pid} -n ip addr</li>\n</ul>\n<p>Namespace 实验练习:</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在新 network namespace 执行 <span class=\"built_in\">sleep</span> 指令</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">unshare -fn <span class=\"built_in\">sleep</span> 60</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看进程信息</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ps -ef|grep <span class=\"built_in\">sleep</span></span></span><br><span class=\"line\">root 32882 4935 0 10:00 pts/0 00:00:00 unshare -fn sleep 60</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看网络 Namespace</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">lsns -t net</span></span><br><span class=\"line\">4026532508 net 2 32882 root unassigned unshare #新增一条 net Namespace</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入该进程所在 Namespace 查看网络配置，与主机不一致</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">nsenter -t 32882 -n ip a</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br></pre></td></tr></table></figure>\n\n<p>命令参考 <a href=\"https://man7.org/linux/man-pages/man8/lsns.8.html\">lsns</a>、<a href=\"https://man7.org/linux/man-pages/man1/unshare.1.html\">unshare</a>、<a href=\"https://man7.org/linux/man-pages/man1/nsenter.1.html\">nsenter</a></p>\n<ol start=\"2\">\n<li><p>Cgroups</p>\n<p>Cgroups(Control Groups) 是 Linux 下用于对一个或一组进程进行资源控制和监控的机制:</p>\n<ul>\n<li>可以对诸如 CPU 使用时间、内存、磁盘 I&#x2F;O 等进程所需的资源进行限制</li>\n<li>不同资源的具体管理工作由相应的 Cgroup 子系统（Subsystem）来实现</li>\n<li>针对不同类型的资源限制，只要将限制策略在不同的的子系统上进行关联即可</li>\n<li>Cgroups 在不同的系统资源管理子系统中以层级树（Hierarchy）的方式来组织管理：每个 Cgroup 都可以包含其他的子 Cgroup，因此子 Cgroup 能使用的资源除了受本 Cgroup 配置的资源参数限制，还受到父 Cgroup 设置的资源限制</li>\n</ul>\n<p>Cgroups 实验练习:</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">在 cgroup cpu 子系统目录中新建cpudemo目录，或者使用 cgcreate cpu:cpudemo</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /sys/fs/cgroup/cpu</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> cpudemo</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> cpudemo</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ll</span></span><br><span class=\"line\">...</span><br><span class=\"line\">-rw-r--r--. 1 root root 0 Oct 20 11:23 cpu.cfs_period_us</span><br><span class=\"line\">-rw-r--r--. 1 root root 0 Oct 20 11:23 cpu.cfs_quota_us</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编写 busyloop.sh 死循环程序</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> busyloop.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\">while :</span><br><span class=\"line\">do :</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行 busyloop</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">./busyloop.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行 top 查看 CPU 使用情况，CPU 占用 100%</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过 cgroup 限制 CPU</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /sys/fs/cgroup/cpu/cpudemo</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">把进程添加到 cgroup 进程配置组，将pid 写到cgroup.procs 或者使用 cgclassify -g cpu:cpudemo pid</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> ps -ef|grep busyloop|grep -v grep|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span> &gt; cgroup.procs</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置 cpuquota</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> 50000 &gt; cpu.cfs_quota_us</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行 top 查看 CPU 使用情况，CPU 占用变为 50%(cpu.cfs_quota_us/cpu.cfs_period_us)</span></span><br></pre></td></tr></table></figure>\n\n<p>参考命令: <a href=\"https://linux.die.net/man/1/cgcreate\">cgcreate</a>、<a href=\"https://linux.die.net/man/1/cgclassify\">cgclassify</a> </p>\n<p>CPU 子系统</p>\n<ul>\n<li>cpu.cfs_period_us: cfs_period_us 用来配置时间周期长度，单位为 us（微秒）</li>\n<li>cpu.cfs_quota_us: cfs_quota_us 用来配置当前 Cgroup 在 cfs_period_us 时间内最多能使用的 CPU 时间数，单位为 us（微秒）</li>\n<li>cpu.stat: Cgroup 内的进程使用的 CPU 时间统计</li>\n<li>nr_periods: 经过 cpu.cfs_period_us 的时间周期数量</li>\n<li>nr_throttled: 在经过的周期内，有多少次因为进程在指定的时间周期内用光了配额时间而受到限制</li>\n<li>throttled_time: Cgroup 中的进程被限制使用 CPU 的总用时，单位是 ns（纳秒）</li>\n</ul>\n<ol start=\"3\">\n<li><p>Union FS(联合文件系统)</p>\n<ul>\n<li>将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)的文件系统</li>\n<li>支持为每一个成员目录(类似 Git Branch)设定 readonly、readwrite 和 whiteout-able 权限</li>\n<li>文件系统分层, 对 readonly 权限的 branch 可以逻辑上进行修改(增量地, 不影响 readonly 部分的)</li>\n<li>通常 Union FS 有两个用途, 一方面可以将多个 disk 挂到同一个目录下, 另一个更常用的就是将一个 readonly 的 branch 和一个 writeable 的 branch 联合在一起</li>\n</ul>\n<p>OverlayFS 是一种联合文件系统，同样属于文件级的存储驱动，包含了最初的 Overlay 和更新更稳定的 overlay2。Overlay 只有两层: upper 层和 Lower 层，Lower 层代表镜像层，upper 层代表容器可写层。<br><img src=\"https://i.loli.net/2021/10/20/QvfVziFsxHIe7aW.png\" alt=\"ufs.png\"></p>\n</li>\n</ol>\n<p>  Union FS 实验练习:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> upper lower merged work</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;from lower&quot;</span> &gt; lower/in_lower.txt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;from upper&quot;</span> &gt; upper/in_upper.txt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;from lower&quot;</span> &gt; lower/in_both.txt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;from upper&quot;</span> &gt; upper/in_both.txt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo mount -t overlay overlay -o lowerdir=`<span class=\"built_in\">pwd</span>`/lower,upperdir=`<span class=\"built_in\">pwd</span>`/upper,workdir=`<span class=\"built_in\">pwd</span>`/work `<span class=\"built_in\">pwd</span>`/merged</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> merged/in_both.txt</span></span><br><span class=\"line\"> from upper</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"镜像管理\"><a href=\"#镜像管理\" class=\"headerlink\" title=\"镜像管理\"></a>镜像管理</h1><ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/pull/\">拉取镜像</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer pull &#123;镜像名&#125;:&#123;tag&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 tag 可以没有, 默认为 latest, <code>docker pull centos</code> 等价与 <code>docker pull centos:latest</code></p>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/rmi/\">删除镜像</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi &#123;镜像名&#125;:&#123;tag&#125; Or &#123;镜像Id&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/images/\">查看镜像</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">列出本机镜像</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定镜像的元数据</span></span><br><span class=\"line\">docker inspect &#123;镜像名&#125;:&#123;tag&#125; Or &#123;镜像Id&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/build/\">构建镜像</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t &#123;镜像名&#125;:&#123;tag&#125; -f &#123;Dokcerfile文件路径&#125; .</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.docker.com/engine/reference/builder/\">Dockerfile</a></p>\n<p>文件格式:{指令} {参数}<br>常用指令:</p>\n<ul>\n<li><p>FROM: 指定父镜像，基于该父镜像修改构建新镜像</p>\n</li>\n<li><p>RUN: 构建时在镜像中执行的指令</p>\n</li>\n<li><p>ADD: 添加文件到镜像</p>\n</li>\n<li><p>COPY: 与ADD 类似, 不同的是不支持源为 url</p>\n</li>\n<li><p>CMD:用来指定容器启动时用到的命令,只能有一条</p>\n</li>\n<li><p>ENTRYPOINT: 与CMD类似, CMD 是可以被 docker run 指令覆盖的，而 ENTRYPOINT 不能覆盖</p>\n</li>\n<li><p>ENV: 自定义设置容器的环境变量</p>\n</li>\n<li><p>EXPOSE:用来暴露端口</p>\n</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Set the base image to CentOS  基于centos镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> centos</span><br><span class=\"line\"><span class=\"comment\"># File Author / Maintainer  作者信息</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> test test@example.com</span><br><span class=\"line\"><span class=\"comment\"># Install necessary tools  安装一些依赖的包</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum install -y pcre-devel wget net-tools gcc zlib zlib-devel make openssl-devel</span></span><br><span class=\"line\"><span class=\"comment\"># Install Nginx  安装nginx</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> http://nginx.org/download/nginx-1.8.0.tar.gz .  <span class=\"comment\"># 添加nginx的压缩包到当前目录下</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> tar zxvf nginx-1.8.0.tar.gz  <span class=\"comment\"># 解包</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> -p /usr/local/nginx  <span class=\"comment\"># 创建nginx目录</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">cd</span> nginx-1.8.0 &amp;&amp; ./configure --prefix=/usr/local/nginx &amp;&amp; make &amp;&amp; make install  <span class=\"comment\"># 编译安装</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">rm</span> -fv /usr/local/nginx/conf/nginx.conf  <span class=\"comment\"># 删除自带的nginx配置文件</span></span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> http://www.apelearn.com/study_v2/.nginx_conf /usr/local/nginx/conf/nginx.conf  <span class=\"comment\"># 添加nginx配置文件</span></span></span><br><span class=\"line\"><span class=\"comment\"># Expose ports  开放80端口出来</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># Set the default command to execute when creating a new container  这里是因为防止服务启动后容器会停止的情况，所以需要多执行一句tail命令</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> /usr/local/nginx/sbin/nginx &amp;&amp; <span class=\"built_in\">tail</span> -f /etc/passwd</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"容器管理\"><a href=\"#容器管理\" class=\"headerlink\" title=\"容器管理\"></a>容器管理</h1><ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/run/\">创建容器</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [选项参数] &#123;镜像名 Or 镜像 ID&#125; [命令]</span><br></pre></td></tr></table></figure>\n\n<p>常用选项参数:</p>\n<ul>\n<li>-d: 后台运行容器，并返回容器 ID</li>\n<li>-p: 指定端口映射，格式为: 宿主机端口:容器端口</li>\n<li>-v: 目录映射，格式为: 宿主机目录:容器目录</li>\n<li>-i: 以交互模式运行容器，通常与-t 同时使用</li>\n<li>-t: 为容器重新分配一个伪输入终端，通常与-i 同时使用</li>\n<li>–link: 指定关联容器, –link 实际是在 &#x2F;etc&#x2F;hosts 添加了一条记录</li>\n<li>–name: 指定容器名</li>\n<li>–network: 指定容器网络</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker run -itd --name node1 centos /bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker run -itd --name node2 --<span class=\"built_in\">link</span> node1 centos /bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker <span class=\"built_in\">exec</span> -it node2 <span class=\"built_in\">cat</span> /etc/hosts</span></span><br><span class=\"line\">172.17.0.3 node1 5bdc55fc59e1</span><br><span class=\"line\">172.17.0.4 d67460c5c4a4</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker <span class=\"built_in\">exec</span> -it node1 ip addr</span></span><br><span class=\"line\">...</span><br><span class=\"line\">inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br></pre></td></tr></table></figure>\n\n<p>在容器中运行命令: <code>docker -it exec &#123;容器&#125; &#123;命令&#125;</code></p>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/rm/\">删除容器</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm &#123;容器名 Or 容器 id&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/ps/\">查看容器</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps [-a]</span><br><span class=\"line\">ps 默认查看正在运行的容器，-a 查看所有容器</span><br><span class=\"line\">docker inspect &#123;容器名 Or 容器 ID&#125;</span><br><span class=\"line\">inspect 查看容器的元数据</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/stop/\">停止容器</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop &#123;容器名 Or 容器 ID&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/start/\">启动容器</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start &#123;容器名 Or 容器 ID&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"容器网络\"><a href=\"#容器网络\" class=\"headerlink\" title=\"容器网络\"></a><a href=\"https://docs.docker.com/network/\">容器网络</a></h1><h3 id=\"网络类型\"><a href=\"#网络类型\" class=\"headerlink\" title=\"网络类型\"></a>网络类型</h3><table>\n<thead>\n<tr>\n<th>驱动类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>null</td>\n<td>不创建网络，–network none，安装后默认有个null类型的网络名叫 ‘none’ ， 仅有一个</td>\n</tr>\n<tr>\n<td>host</td>\n<td>与宿主机共享网络, –network host，安装后默认有个host 驱动类型的网络名叫 ‘host’， 仅有一个</td>\n</tr>\n<tr>\n<td>bridge</td>\n<td>通过桥接的方式连接，–network bridge，安装后默认有个bridge 驱动类型的网络名叫 ‘bridge’</td>\n</tr>\n<tr>\n<td>overlay</td>\n<td>跨主机容器间通信</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker network <span class=\"built_in\">ls</span></span></span><br><span class=\"line\">NETWORK ID     NAME          DRIVER    SCOPE</span><br><span class=\"line\">1876394273c5   bridge        bridge    local</span><br><span class=\"line\">2e66029c7c78   host          host      local</span><br><span class=\"line\">49423498220b   none          null      local</span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">docker network create --driver null none2</span></span><br><span class=\"line\">Error response from daemon: only one instance of &quot;null&quot; network is allowed</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker network create --driver host host2</span></span><br><span class=\"line\">Error response from daemon: only one instance of &quot;host&quot; network is allowed</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网络管理\"><a href=\"#网络管理\" class=\"headerlink\" title=\"网络管理\"></a><a href=\"https://docs.docker.com/engine/reference/commandline/network/\">网络管理</a></h3><ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/network_ls/\">查看</a>  <code>docker network ls</code> 、 <code> docker network inspect</code></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/network_create/\">创建</a> <code>docker network create</code></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/network_rm/\">删除</a>  <code>docker network rm</code></li>\n</ul>\n<h1 id=\"docker-容器核心技术\"><a href=\"#docker-容器核心技术\" class=\"headerlink\" title=\"docker 容器核心技术\"></a>docker 容器核心技术</h1><ol>\n<li><p>Namespace</p>\n<p>Namespace 是一种 Linux Kernel 提供的资源隔离方案:</p>\n<ul>\n<li>系统可以为进程分配不同的 Namespace</li>\n<li>并保证不同的 Namespace 资源独立分配、进程彼此隔离，即不同的 Namespace 下的进 程互不干扰</li>\n</ul>\n<p>Namespace 常用操作:</p>\n<ul>\n<li>查看当前系统的 namespace：lsns –t {type}</li>\n<li>查看某进程的 namespace：ls -la &#x2F;proc&#x2F;{pid}&#x2F;ns&#x2F;</li>\n<li>进入某进程的 namespace：nsenter -t {pid} -n ip addr</li>\n</ul>\n<p>Namespace 实验练习:</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在新 network namespace 执行 <span class=\"built_in\">sleep</span> 指令</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">unshare -fn <span class=\"built_in\">sleep</span> 60</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看进程信息</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ps -ef|grep <span class=\"built_in\">sleep</span></span></span><br><span class=\"line\">root 32882 4935 0 10:00 pts/0 00:00:00 unshare -fn sleep 60</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看网络 Namespace</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">lsns -t net</span></span><br><span class=\"line\">4026532508 net 2 32882 root unassigned unshare #新增一条 net Namespace</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入该进程所在 Namespace 查看网络配置，与主机不一致</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">nsenter -t 32882 -n ip a</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br></pre></td></tr></table></figure>\n\n<p>命令参考 <a href=\"https://man7.org/linux/man-pages/man8/lsns.8.html\">lsns</a>、<a href=\"https://man7.org/linux/man-pages/man1/unshare.1.html\">unshare</a>、<a href=\"https://man7.org/linux/man-pages/man1/nsenter.1.html\">nsenter</a></p>\n<ol start=\"2\">\n<li><p>Cgroups</p>\n<p>Cgroups(Control Groups) 是 Linux 下用于对一个或一组进程进行资源控制和监控的机制:</p>\n<ul>\n<li>可以对诸如 CPU 使用时间、内存、磁盘 I&#x2F;O 等进程所需的资源进行限制</li>\n<li>不同资源的具体管理工作由相应的 Cgroup 子系统（Subsystem）来实现</li>\n<li>针对不同类型的资源限制，只要将限制策略在不同的的子系统上进行关联即可</li>\n<li>Cgroups 在不同的系统资源管理子系统中以层级树（Hierarchy）的方式来组织管理：每个 Cgroup 都可以包含其他的子 Cgroup，因此子 Cgroup 能使用的资源除了受本 Cgroup 配置的资源参数限制，还受到父 Cgroup 设置的资源限制</li>\n</ul>\n<p>Cgroups 实验练习:</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">在 cgroup cpu 子系统目录中新建cpudemo目录，或者使用 cgcreate cpu:cpudemo</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /sys/fs/cgroup/cpu</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> cpudemo</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> cpudemo</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ll</span></span><br><span class=\"line\">...</span><br><span class=\"line\">-rw-r--r--. 1 root root 0 Oct 20 11:23 cpu.cfs_period_us</span><br><span class=\"line\">-rw-r--r--. 1 root root 0 Oct 20 11:23 cpu.cfs_quota_us</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编写 busyloop.sh 死循环程序</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> busyloop.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\">while :</span><br><span class=\"line\">do :</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行 busyloop</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">./busyloop.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行 top 查看 CPU 使用情况，CPU 占用 100%</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过 cgroup 限制 CPU</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /sys/fs/cgroup/cpu/cpudemo</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">把进程添加到 cgroup 进程配置组，将pid 写到cgroup.procs 或者使用 cgclassify -g cpu:cpudemo pid</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> ps -ef|grep busyloop|grep -v grep|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span> &gt; cgroup.procs</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置 cpuquota</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> 50000 &gt; cpu.cfs_quota_us</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行 top 查看 CPU 使用情况，CPU 占用变为 50%(cpu.cfs_quota_us/cpu.cfs_period_us)</span></span><br></pre></td></tr></table></figure>\n\n<p>参考命令: <a href=\"https://linux.die.net/man/1/cgcreate\">cgcreate</a>、<a href=\"https://linux.die.net/man/1/cgclassify\">cgclassify</a> </p>\n<p>CPU 子系统</p>\n<ul>\n<li>cpu.cfs_period_us: cfs_period_us 用来配置时间周期长度，单位为 us（微秒）</li>\n<li>cpu.cfs_quota_us: cfs_quota_us 用来配置当前 Cgroup 在 cfs_period_us 时间内最多能使用的 CPU 时间数，单位为 us（微秒）</li>\n<li>cpu.stat: Cgroup 内的进程使用的 CPU 时间统计</li>\n<li>nr_periods: 经过 cpu.cfs_period_us 的时间周期数量</li>\n<li>nr_throttled: 在经过的周期内，有多少次因为进程在指定的时间周期内用光了配额时间而受到限制</li>\n<li>throttled_time: Cgroup 中的进程被限制使用 CPU 的总用时，单位是 ns（纳秒）</li>\n</ul>\n<ol start=\"3\">\n<li><p>Union FS(联合文件系统)</p>\n<ul>\n<li>将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)的文件系统</li>\n<li>支持为每一个成员目录(类似 Git Branch)设定 readonly、readwrite 和 whiteout-able 权限</li>\n<li>文件系统分层, 对 readonly 权限的 branch 可以逻辑上进行修改(增量地, 不影响 readonly 部分的)</li>\n<li>通常 Union FS 有两个用途, 一方面可以将多个 disk 挂到同一个目录下, 另一个更常用的就是将一个 readonly 的 branch 和一个 writeable 的 branch 联合在一起</li>\n</ul>\n<p>OverlayFS 是一种联合文件系统，同样属于文件级的存储驱动，包含了最初的 Overlay 和更新更稳定的 overlay2。Overlay 只有两层: upper 层和 Lower 层，Lower 层代表镜像层，upper 层代表容器可写层。<br><img src=\"https://i.loli.net/2021/10/20/QvfVziFsxHIe7aW.png\" alt=\"ufs.png\"></p>\n</li>\n</ol>\n<p>  Union FS 实验练习:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> upper lower merged work</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;from lower&quot;</span> &gt; lower/in_lower.txt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;from upper&quot;</span> &gt; upper/in_upper.txt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;from lower&quot;</span> &gt; lower/in_both.txt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;from upper&quot;</span> &gt; upper/in_both.txt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo mount -t overlay overlay -o lowerdir=`<span class=\"built_in\">pwd</span>`/lower,upperdir=`<span class=\"built_in\">pwd</span>`/upper,workdir=`<span class=\"built_in\">pwd</span>`/work `<span class=\"built_in\">pwd</span>`/merged</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> merged/in_both.txt</span></span><br><span class=\"line\"> from upper</span><br></pre></td></tr></table></figure>"},{"title":"shell tutorial","date":"2023-12-09T11:10:51.000Z","_content":"\n### 一、变量\n\n#### 1、变量分类\n\n1. 环境变量： 系统环境变量定义，如：PATH\n\n2. 全局变量： shell 脚本文件定义的全局性变量\n\n3. 局部变量： shell 脚本定义的局部性变量\n\n   在 *函数* 章节将具体介绍这几种变量的使用\n\n#### 2、变量的类型\n\nshell 中变量类型都是string\n\n#### 3、变量定义以及取值\n\n定义： 变量名=变量值\n\n**变量名只能是英文字符或者数字或者下划线‘_’ ， 且不能是数字开头**\n\n取值：$变量名 \n\n```shell\n$ name=liuheng #定义变量，‘=’ 前后不能有空格\n$ echo $name   #变量取值\nliuheng\n```\n\n#### 4、命令替代\n\n将命令的输出结果存到变量\n\n```shell\n变量名=`命令`  或者  变量名=$(命令)\n\n$ now=`date`   #获取date 命令值保存在now 变量\n$ echo $now    #从变量取值\n2021年09月27日 16:48:41\n$ now2=$(date) #获取date 命令值保存在now 变量\n$ echo $now2\n2021年09月27日 16:50:04\n```\n\n#### 5、运算式替代\n\n将运算表达式结果保存到变量\n\n```shell\n变量名=$[运算表达式]   或者  变量名=$((运算表达式))\n\n$ one=1\n$ two=2\n$ sum=$[one+two]  \t#计算 one+two 的结果保存在sum 变量\n$ echo $sum\n3\n$ sum2=$((one+two)) #计算 one+two 的结果保存在sum 变量\n$ echo $sum2\n3\n```\n\n### 二、条件测试\n\n[  判断条件  ] 或者  test   判断条件   \n\n**注意判断条件与'[' 、']'   之间有空格， 判断条件可以是多个，通过逻辑运算符连接** \n\n#### 1、数值判断  \n\neq: 等于\n\ngt:大于\n\nge:大于等于\n\nlt:小于\n\nle:小于等于\n\n```shell\n#数值判断 方式1\n$ var=2\n$ test $var -eq 2     #判断var 是否等于2 \n$ echo $?     \t\t #返回上条命令的执行结果, 0:true 1:false\n0\t\t\t\t\t#true\n$ test $var -eq 3     #判断var 是否等于3\n$ echo $?\t\t\t\n1\t\t\t\t\t#false\n#数值判断 方式2(比较常用) 下文以方式2的格式举例\n$ [ $var -eq 2 ]\n$ echo $?\n0\n$ [ $var -eq 3 ]\n$ echo $?\n1\n```\n\n#### 2、字符串判断\n\n= ： 等于 \n\n!=  ：不等于\n\n```shell\n#字符串判断\n$ str=liuheng\n$ [ $str = liuheng ] # 判断变量str是否是liuheng， 注意‘=’ 前后有空格  \n$ echo $?\n0\n$ [ $str = liuheng1 ]\n$ echo $?\n1\n```\n\n#### 3、文件判断\n\n-d  是否是目录\n\n-f  是否是一般文件文件\n\n... 其他\n\n```shell\n#文件判断\n$ dir=/e/Program_Files/OpenVPN/config\n$ [ -d $dir ] #判断dir 是否是个目录\n$ echo $?\n0\n```\n\n#### 4、逻辑运算:与或非\n\n-a :  与，and\n\n-o:  或， or\n\n!: 非\n\n```shell\n#多个条件组合\n#and\n$ name=liuheng\n$ age=18\n$ [ $age -eq 18 -a $name = liuheng ] #条件1 and 条件2 同时满足为true\n$ echo $?\n0\n$ [ $age -eq 18 -a $name = lucas ]   #条件1 and 条件2 同时满足为true\n$ echo $?\n1\n# or\n$ [ $age -eq 8 -o $name = liuheng ] #条件1 or 条件2 满足其一为true\n$ echo $?\n0\n```\n\n\n\n### 三、分支结构\n\n#### 1、if  结构\n\n```shell\n#if .. elif .. else .. fi\nif [ 条件1 ]\nthen\n\t#do something\nelif [ 条件2 ]\nthen\n\t#do something\nelse\n\t#do something\nfi\n\n#if .. fi\nif [ 条件 ]\nthen\n\t#do\nfi\n#if .. else .. fi \nif [ 条件 ]\nthen\n\t#do something\nelse\n    #do something\nfi\n\n#if/elif 与 then 可以在同一行，但需要‘;’ 分开\nif [ 条件 ]; then\n\t#do something\nfi\n#if、elif、then、else、fi 是独立的语句需换行或者‘;’ 分割开，否则shel 解释器不能识别\n#下面的for、do, while、do 同理  \n\n#例子 if.sh\n#! /bin/bash\nage=18\nif [ $age -ge 18 ]\nthen\n\techo \"年龄大于等于18\"\nelif [ $age -ge 12 ]\nthen\n\techo \"年龄大于等于12小于18\"\nelse\n\techo \"年龄小于12\"\nfi\n$ sh if.sh\n年龄大于等于18\n```\n\n#### 2、case 结构\n\n```shell\ncase $变量名 in\n\"情况1\")\n#如果变量的值等于情况1，则执行\n;; #结束情况1 的逻辑 等价c语言的break\n\"情况2\")\n#如果变量的值等于情况2，则执行\n;;\n*)\n#如果变量的值都不是以上的值，则执行此程序\n;;\nesac\n\n#等价于if结构\nif [ 情况1满足 ]; then\nelif [ 情况2满足 ]; then\nelse\n\t其他情况\nfi\n\n#例子 case.sh\nvar=1\ncase $var in\n1) #$var等于1\n\techo \"情况1\"\n\t;;\n2)#var等于2\n\techo \"情况2\"\n\t;;\n*)#其他 \n    echo \"其他\"\n    ;;\nesac\n$ sh case.sh\n情况1\n```\n\n### 四、循环结构\n\n#### 1、for  结构\n\n```shell\nfor item in list \ndo\n\t#do something\ndone\n#for 与 do 同一行 需要';' 分割\nfor item in list; do \n\t#do something\ndone\n\n#例子 for.sh\n#遍历当前目录文件\nfor file in `ls`\ndo \n    if [ -f $file ];then\n\t\techo $file is a file\n\tfi\ndone\n$ sh for.sh\ncase.sh is a file\nfor.sh is a file\nif.sh is a file\nwhile.sh is a file\n```\n\n#### 2、while  结构\n\n```shell\nwhile 条件\ndo\n\t#do something\ndone\n#while 与do 同一行需要‘;’ 分割\nwhile 条件; do\n\t#do something\ndone\n\n#例子 while.sh\n#从10~1 输出\nvar=10\nwhile [ $var -gt 0 ]\ndo \n\techo $var\n\tvar=$[var-1]\t#计算var-1赋值给var，见上文运算式替代语法, 等价于C 语言的var--\ndone\n$ sh while.sh\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n```\n\n### 五、函数\n\n#### 1、函数定义\n\n```shell\n函数名() {\n\t函数体\n}\n\n#例子 func.sh\nshow() {\n   echo \"hello\"\n}\n```\n\n#### 2、函数调用\n\n```shell\n函数名 [参数列表可选]\n\n#例子func.sh\n#函数定义\nshow() {\n    echo \"hello\"\n}\n#函数调用\nshow\n$ sh fun.sh\nhello\n```\n\n##### \t2.1、参数使用 \n\n​\t$1、$2..、$n： 分别代表第n个参数，$@ : 代表参数列表\n\n```shell\n#例子 arg.sh\n#函数定义\nshow() {\n  echo \"第一个参数：$1\"\n  echo \"第二个参数：$2\"\n}\n#函数调用\nshow a b\n$ sh arg.sh\n第一个参数：a\n第二个参数：b\n```\n\n#####     2.2 、返回值\n\n函数(命令)的执行结果可分为2部分：状态值与输出值 \n状态值：\n\t通过return 返回状态值，若函数体没有return, 状态值为函数最后一条指令的执行状态，通过$? 可以获取执行状态值;\n输出值：\n\t通过输出函数echo 提供输出， 通过 $(函数名) 获取输出值; \n\n函数的执行与命令的执行类似，可认为函数就是一个自定义的命令\n\n```shell\n#函数中使用return返回函数值时，通过$? 来捕获函数返回值\n#例子 return.sh\nisdir() {\n  if [ -d $1 ]; then\n     return 0 #返回true\n  else\n     return 1 #返回false\n  fi\n}\n\nisdir `pwd`\necho $? #$? 保存有函数调用的返回值\n\n#判断函数返回值\nif isdir `pwd`; then echo 'is dir!'; fi\n$ sh return.sh\n0\nis dir!\n\n#函数中使用echo返回函数值时，通过 $(func_name arg1 arg2...) 来捕获函数返回值,同上文命令替代语法\n#例子 return2.sh\nisdir() {\n  if [ -d $1 ]; then\n       echo 0\n  else\n       echo 1\n  fi\n}\n\n#isdir `pwd`\n#echo $? #$? 保存的是isdir 执行是否出错，与isdir echo 的值无关\n\nret=$(isdir `pwd`)\necho \"ret:$ret\"\n\n$ sh return2.sh\n0\nret:0\n```\n\n##### 2.3、变量使用\n\n```shell\n#例子 gvar.sh\ngvar=1\t\t #全局变量,作用于整个文件\n#定义函数\naddOne() {\n  gvar=$[gvar+1]\n}\n#操作 gvar 递增到5\nwhile [ $gvar -lt 5 ]\ndo\n    addOne\ndone\n#输出gvar\necho \"gvar=$gvar\"\n$ sh gvar.sh\ngvar=5\n\n#例子 localvar.sh\ngvar=1\naddOne() {\n  #通过local 标记gvar 变量为局部变量,此变量的作用范围就在此函数，与上文定义的全局变量为2个不同的变量\n  local gvar=$[gvar+1] #计算全局变量gvar+1的值 赋值给局部变量gvar\n  #gvar=$[gvar+1] #无local标记的话gvar 表示的是全局变量\n}\necho \"gvar=$gvar\"  #打印的是全局变量gvar 值没有被修改\n$ sh localvar.sh\ngvar=1\t\t\t\n\n```\n\n### 六、其他\n\n#### 1、脚本传参数\n\n```shell\nsh  脚本  参数1 参数2 #与函数传参相似\n#例子 arg.sh\necho $1\necho $2\n\n$ sh arg.sh 12 34\n12\n34\n\n```\n\n#### 2、输入、输出\n\n```shell\n#例子 input.sh\nread -p \"请输入：\" name  #将输入保存到name, -p 打印提示\necho \"hello $name\"\n$ sh input.sh\n请输入：liuheng\nhello liuheng\n```\n\n#### 3、隐藏输出以及错误\n\n命令 > /dev/null  2>&1 \n\n```shell\n$ ping2  > /dev/null #标准输出重定向到 /dev/null\nbash: ping2: command not found\n$ ping2 > /dev/null 2>&1 #标准输出以及标准错误重定向 /dev/null\n\n/dev/null linux下的黑洞，类似于垃圾桶，任何东西到里面都会被粉碎\n> 重定向 \n1 标准输出\n2 错误输出\n& 表示等同于的意思， 2>&1 表示2的重定向等同于1\n```\n\n#### 4、原子处理命令集\n\n(命令1；命令2) ,  使用() 原子执行命令集合, 类似 &&\n\n```shell\n$ pwd\n/e/Program_Files/OpenVPN/config\n$ (cd ..;ls)  #cd 没有改变当前目录(与 && 连接不同)，ls 列出的是 cd .. 后的文件 \nbin/  config/  doc/  icon.ico  log/  sample-config/  Uninstall.exe*\n$ pwd\n/e/Program_Files/OpenVPN/config\n# && 连接命令\n$ pwd\n/e/Program_Files/OpenVPN/config\n$ cd .. && ls #cd 改变了当前目录\nbin/  config/  doc/  icon.ico  log/  sample-config/  Uninstall.exe*\n$ pwd\n/e/Program_Files/OpenVPN  \n```\n\n#### 5、文本处理工具 awk & sed\n\n```shell\nawk 参数 '脚本' 目标文件     #常用方式\n其中脚本格式：条件1 ｛操作1｝ 条件2 ｛操作2｝...\n条件部分可以没有默认为true, {操作} 等价于 true {操作}\n\n脚本也可以是一个文件，如果脚本部分很复杂的话，可以把脚本写到文件，通过 -f 指定脚本文件\nawk 参数 -f 脚本文件 目标文件  #不常用\n\nawk 命令功能相当于下列伪代码：\nfor line in file:\t\t\t\n\tfor field  in line\t\t#默认按空格分割行，-F 可以指定列分割符号，按指定的字符对行分割成多列 \n       脚本代码\t\t\t\t # if 条件1 操作1  if 条件2  操作2 ...\n       $0 : 当前行，$1 当前行的第1列 $2 当前行的第2列 ...\n\n#例子： 遍历/etc/passwd文件的每一行， 对每行数据以“:”做分割并输出分割后的第一列\n$ awk -F: '{ print $1 }' /etc/passwd \nroot\nlucas\n\n#例子 统计root的进程数\n#END 为特殊条件表示文件处理完时\n#按行处理ps 的输出，统计用户为root的进程个数\n$ ps -ef|awk '$1=\"root\" {count=count+1} END {print count}'\n170\n\nsed 参数 '脚本'  目标文件\n其中脚本部分格式：{匹配目标(位置)}{操作}{操作内容}\n操作：增(a/i)、删(d)、改(s)\neg: \n    sed '2a append line'  test.txt #在第2行后追加内容\n    sed '2i insert line'  test.txt #在第2行前插入内容\n    sed '1d' test.txt              #删除第一行\n    sed '1,3d' test.txt            #删除第1~3行\n    sed 's/print/echo/g' text.txt  #替换print-->echo\n```\n\n#### 6、正则表达式\n\n正则表达式是一种用于匹配字符串的规则，其基本格式为：{元字符} {量词}\n\n元字符： 用于匹配一个字符\n\n量词：用于修饰元字符匹配多少次，既元字符重复的次数\n\n| 元字符 | 描述                                                         |\n| ------ | ------------------------------------------------------------ |\n| ^ 、$  | 开始\\结束                                                    |\n| \\w     | 字母数字下划线                                               |\n| \\W     | \\w 的补集，既非字母数字下划线                                |\n| \\d     | 数字                                                         |\n| \\D     | \\d 的补集，既非数字                                          |\n| \\s     | 空白字符，空格、\\t、\\n                                       |\n| \\S     | \\s的补集, 既非空白字符                                       |\n| \\t     | 制表符                                                       |\n| \\n     | 换行符                                                       |\n| .      | 非换行符                                                     |\n| [...]  | 字符组                                                       |\n| [^...] | 字符组的补集                                                 |\n| ()     | 分组，将多个元字符作为一组当成一个元字符，方便量词同时修饰多个元字符 |\n| \\|     | 或                                                           |\n\n\n\n| 量词    | 描述    |\n| ------- | ------- |\n| ？      | 0或1次  |\n| +       | 1或多次 |\n| *       | 0或多次 |\n| ｛n｝   | n次     |\n| ｛n,｝  | 至少n次 |\n| ｛n,m｝ | n~m 次  |\n\n### 七、练习\n\n1、输入一个用户名判断此用户名在当前Linux 主机系统是否存在，如存在则显示该用户名的用户ID号，否则输出\"不存在\"\n\n2、统计某个目录下(及其子目录下)后缀为.txt 的文件个数\n\n\n\n\n\n","source":"_posts/shell-tutorial.md","raw":"---\ntitle: shell tutorial\ndate: 2023-12-09 19:10:51\ntags: [linux, shell]\n---\n\n### 一、变量\n\n#### 1、变量分类\n\n1. 环境变量： 系统环境变量定义，如：PATH\n\n2. 全局变量： shell 脚本文件定义的全局性变量\n\n3. 局部变量： shell 脚本定义的局部性变量\n\n   在 *函数* 章节将具体介绍这几种变量的使用\n\n#### 2、变量的类型\n\nshell 中变量类型都是string\n\n#### 3、变量定义以及取值\n\n定义： 变量名=变量值\n\n**变量名只能是英文字符或者数字或者下划线‘_’ ， 且不能是数字开头**\n\n取值：$变量名 \n\n```shell\n$ name=liuheng #定义变量，‘=’ 前后不能有空格\n$ echo $name   #变量取值\nliuheng\n```\n\n#### 4、命令替代\n\n将命令的输出结果存到变量\n\n```shell\n变量名=`命令`  或者  变量名=$(命令)\n\n$ now=`date`   #获取date 命令值保存在now 变量\n$ echo $now    #从变量取值\n2021年09月27日 16:48:41\n$ now2=$(date) #获取date 命令值保存在now 变量\n$ echo $now2\n2021年09月27日 16:50:04\n```\n\n#### 5、运算式替代\n\n将运算表达式结果保存到变量\n\n```shell\n变量名=$[运算表达式]   或者  变量名=$((运算表达式))\n\n$ one=1\n$ two=2\n$ sum=$[one+two]  \t#计算 one+two 的结果保存在sum 变量\n$ echo $sum\n3\n$ sum2=$((one+two)) #计算 one+two 的结果保存在sum 变量\n$ echo $sum2\n3\n```\n\n### 二、条件测试\n\n[  判断条件  ] 或者  test   判断条件   \n\n**注意判断条件与'[' 、']'   之间有空格， 判断条件可以是多个，通过逻辑运算符连接** \n\n#### 1、数值判断  \n\neq: 等于\n\ngt:大于\n\nge:大于等于\n\nlt:小于\n\nle:小于等于\n\n```shell\n#数值判断 方式1\n$ var=2\n$ test $var -eq 2     #判断var 是否等于2 \n$ echo $?     \t\t #返回上条命令的执行结果, 0:true 1:false\n0\t\t\t\t\t#true\n$ test $var -eq 3     #判断var 是否等于3\n$ echo $?\t\t\t\n1\t\t\t\t\t#false\n#数值判断 方式2(比较常用) 下文以方式2的格式举例\n$ [ $var -eq 2 ]\n$ echo $?\n0\n$ [ $var -eq 3 ]\n$ echo $?\n1\n```\n\n#### 2、字符串判断\n\n= ： 等于 \n\n!=  ：不等于\n\n```shell\n#字符串判断\n$ str=liuheng\n$ [ $str = liuheng ] # 判断变量str是否是liuheng， 注意‘=’ 前后有空格  \n$ echo $?\n0\n$ [ $str = liuheng1 ]\n$ echo $?\n1\n```\n\n#### 3、文件判断\n\n-d  是否是目录\n\n-f  是否是一般文件文件\n\n... 其他\n\n```shell\n#文件判断\n$ dir=/e/Program_Files/OpenVPN/config\n$ [ -d $dir ] #判断dir 是否是个目录\n$ echo $?\n0\n```\n\n#### 4、逻辑运算:与或非\n\n-a :  与，and\n\n-o:  或， or\n\n!: 非\n\n```shell\n#多个条件组合\n#and\n$ name=liuheng\n$ age=18\n$ [ $age -eq 18 -a $name = liuheng ] #条件1 and 条件2 同时满足为true\n$ echo $?\n0\n$ [ $age -eq 18 -a $name = lucas ]   #条件1 and 条件2 同时满足为true\n$ echo $?\n1\n# or\n$ [ $age -eq 8 -o $name = liuheng ] #条件1 or 条件2 满足其一为true\n$ echo $?\n0\n```\n\n\n\n### 三、分支结构\n\n#### 1、if  结构\n\n```shell\n#if .. elif .. else .. fi\nif [ 条件1 ]\nthen\n\t#do something\nelif [ 条件2 ]\nthen\n\t#do something\nelse\n\t#do something\nfi\n\n#if .. fi\nif [ 条件 ]\nthen\n\t#do\nfi\n#if .. else .. fi \nif [ 条件 ]\nthen\n\t#do something\nelse\n    #do something\nfi\n\n#if/elif 与 then 可以在同一行，但需要‘;’ 分开\nif [ 条件 ]; then\n\t#do something\nfi\n#if、elif、then、else、fi 是独立的语句需换行或者‘;’ 分割开，否则shel 解释器不能识别\n#下面的for、do, while、do 同理  \n\n#例子 if.sh\n#! /bin/bash\nage=18\nif [ $age -ge 18 ]\nthen\n\techo \"年龄大于等于18\"\nelif [ $age -ge 12 ]\nthen\n\techo \"年龄大于等于12小于18\"\nelse\n\techo \"年龄小于12\"\nfi\n$ sh if.sh\n年龄大于等于18\n```\n\n#### 2、case 结构\n\n```shell\ncase $变量名 in\n\"情况1\")\n#如果变量的值等于情况1，则执行\n;; #结束情况1 的逻辑 等价c语言的break\n\"情况2\")\n#如果变量的值等于情况2，则执行\n;;\n*)\n#如果变量的值都不是以上的值，则执行此程序\n;;\nesac\n\n#等价于if结构\nif [ 情况1满足 ]; then\nelif [ 情况2满足 ]; then\nelse\n\t其他情况\nfi\n\n#例子 case.sh\nvar=1\ncase $var in\n1) #$var等于1\n\techo \"情况1\"\n\t;;\n2)#var等于2\n\techo \"情况2\"\n\t;;\n*)#其他 \n    echo \"其他\"\n    ;;\nesac\n$ sh case.sh\n情况1\n```\n\n### 四、循环结构\n\n#### 1、for  结构\n\n```shell\nfor item in list \ndo\n\t#do something\ndone\n#for 与 do 同一行 需要';' 分割\nfor item in list; do \n\t#do something\ndone\n\n#例子 for.sh\n#遍历当前目录文件\nfor file in `ls`\ndo \n    if [ -f $file ];then\n\t\techo $file is a file\n\tfi\ndone\n$ sh for.sh\ncase.sh is a file\nfor.sh is a file\nif.sh is a file\nwhile.sh is a file\n```\n\n#### 2、while  结构\n\n```shell\nwhile 条件\ndo\n\t#do something\ndone\n#while 与do 同一行需要‘;’ 分割\nwhile 条件; do\n\t#do something\ndone\n\n#例子 while.sh\n#从10~1 输出\nvar=10\nwhile [ $var -gt 0 ]\ndo \n\techo $var\n\tvar=$[var-1]\t#计算var-1赋值给var，见上文运算式替代语法, 等价于C 语言的var--\ndone\n$ sh while.sh\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n```\n\n### 五、函数\n\n#### 1、函数定义\n\n```shell\n函数名() {\n\t函数体\n}\n\n#例子 func.sh\nshow() {\n   echo \"hello\"\n}\n```\n\n#### 2、函数调用\n\n```shell\n函数名 [参数列表可选]\n\n#例子func.sh\n#函数定义\nshow() {\n    echo \"hello\"\n}\n#函数调用\nshow\n$ sh fun.sh\nhello\n```\n\n##### \t2.1、参数使用 \n\n​\t$1、$2..、$n： 分别代表第n个参数，$@ : 代表参数列表\n\n```shell\n#例子 arg.sh\n#函数定义\nshow() {\n  echo \"第一个参数：$1\"\n  echo \"第二个参数：$2\"\n}\n#函数调用\nshow a b\n$ sh arg.sh\n第一个参数：a\n第二个参数：b\n```\n\n#####     2.2 、返回值\n\n函数(命令)的执行结果可分为2部分：状态值与输出值 \n状态值：\n\t通过return 返回状态值，若函数体没有return, 状态值为函数最后一条指令的执行状态，通过$? 可以获取执行状态值;\n输出值：\n\t通过输出函数echo 提供输出， 通过 $(函数名) 获取输出值; \n\n函数的执行与命令的执行类似，可认为函数就是一个自定义的命令\n\n```shell\n#函数中使用return返回函数值时，通过$? 来捕获函数返回值\n#例子 return.sh\nisdir() {\n  if [ -d $1 ]; then\n     return 0 #返回true\n  else\n     return 1 #返回false\n  fi\n}\n\nisdir `pwd`\necho $? #$? 保存有函数调用的返回值\n\n#判断函数返回值\nif isdir `pwd`; then echo 'is dir!'; fi\n$ sh return.sh\n0\nis dir!\n\n#函数中使用echo返回函数值时，通过 $(func_name arg1 arg2...) 来捕获函数返回值,同上文命令替代语法\n#例子 return2.sh\nisdir() {\n  if [ -d $1 ]; then\n       echo 0\n  else\n       echo 1\n  fi\n}\n\n#isdir `pwd`\n#echo $? #$? 保存的是isdir 执行是否出错，与isdir echo 的值无关\n\nret=$(isdir `pwd`)\necho \"ret:$ret\"\n\n$ sh return2.sh\n0\nret:0\n```\n\n##### 2.3、变量使用\n\n```shell\n#例子 gvar.sh\ngvar=1\t\t #全局变量,作用于整个文件\n#定义函数\naddOne() {\n  gvar=$[gvar+1]\n}\n#操作 gvar 递增到5\nwhile [ $gvar -lt 5 ]\ndo\n    addOne\ndone\n#输出gvar\necho \"gvar=$gvar\"\n$ sh gvar.sh\ngvar=5\n\n#例子 localvar.sh\ngvar=1\naddOne() {\n  #通过local 标记gvar 变量为局部变量,此变量的作用范围就在此函数，与上文定义的全局变量为2个不同的变量\n  local gvar=$[gvar+1] #计算全局变量gvar+1的值 赋值给局部变量gvar\n  #gvar=$[gvar+1] #无local标记的话gvar 表示的是全局变量\n}\necho \"gvar=$gvar\"  #打印的是全局变量gvar 值没有被修改\n$ sh localvar.sh\ngvar=1\t\t\t\n\n```\n\n### 六、其他\n\n#### 1、脚本传参数\n\n```shell\nsh  脚本  参数1 参数2 #与函数传参相似\n#例子 arg.sh\necho $1\necho $2\n\n$ sh arg.sh 12 34\n12\n34\n\n```\n\n#### 2、输入、输出\n\n```shell\n#例子 input.sh\nread -p \"请输入：\" name  #将输入保存到name, -p 打印提示\necho \"hello $name\"\n$ sh input.sh\n请输入：liuheng\nhello liuheng\n```\n\n#### 3、隐藏输出以及错误\n\n命令 > /dev/null  2>&1 \n\n```shell\n$ ping2  > /dev/null #标准输出重定向到 /dev/null\nbash: ping2: command not found\n$ ping2 > /dev/null 2>&1 #标准输出以及标准错误重定向 /dev/null\n\n/dev/null linux下的黑洞，类似于垃圾桶，任何东西到里面都会被粉碎\n> 重定向 \n1 标准输出\n2 错误输出\n& 表示等同于的意思， 2>&1 表示2的重定向等同于1\n```\n\n#### 4、原子处理命令集\n\n(命令1；命令2) ,  使用() 原子执行命令集合, 类似 &&\n\n```shell\n$ pwd\n/e/Program_Files/OpenVPN/config\n$ (cd ..;ls)  #cd 没有改变当前目录(与 && 连接不同)，ls 列出的是 cd .. 后的文件 \nbin/  config/  doc/  icon.ico  log/  sample-config/  Uninstall.exe*\n$ pwd\n/e/Program_Files/OpenVPN/config\n# && 连接命令\n$ pwd\n/e/Program_Files/OpenVPN/config\n$ cd .. && ls #cd 改变了当前目录\nbin/  config/  doc/  icon.ico  log/  sample-config/  Uninstall.exe*\n$ pwd\n/e/Program_Files/OpenVPN  \n```\n\n#### 5、文本处理工具 awk & sed\n\n```shell\nawk 参数 '脚本' 目标文件     #常用方式\n其中脚本格式：条件1 ｛操作1｝ 条件2 ｛操作2｝...\n条件部分可以没有默认为true, {操作} 等价于 true {操作}\n\n脚本也可以是一个文件，如果脚本部分很复杂的话，可以把脚本写到文件，通过 -f 指定脚本文件\nawk 参数 -f 脚本文件 目标文件  #不常用\n\nawk 命令功能相当于下列伪代码：\nfor line in file:\t\t\t\n\tfor field  in line\t\t#默认按空格分割行，-F 可以指定列分割符号，按指定的字符对行分割成多列 \n       脚本代码\t\t\t\t # if 条件1 操作1  if 条件2  操作2 ...\n       $0 : 当前行，$1 当前行的第1列 $2 当前行的第2列 ...\n\n#例子： 遍历/etc/passwd文件的每一行， 对每行数据以“:”做分割并输出分割后的第一列\n$ awk -F: '{ print $1 }' /etc/passwd \nroot\nlucas\n\n#例子 统计root的进程数\n#END 为特殊条件表示文件处理完时\n#按行处理ps 的输出，统计用户为root的进程个数\n$ ps -ef|awk '$1=\"root\" {count=count+1} END {print count}'\n170\n\nsed 参数 '脚本'  目标文件\n其中脚本部分格式：{匹配目标(位置)}{操作}{操作内容}\n操作：增(a/i)、删(d)、改(s)\neg: \n    sed '2a append line'  test.txt #在第2行后追加内容\n    sed '2i insert line'  test.txt #在第2行前插入内容\n    sed '1d' test.txt              #删除第一行\n    sed '1,3d' test.txt            #删除第1~3行\n    sed 's/print/echo/g' text.txt  #替换print-->echo\n```\n\n#### 6、正则表达式\n\n正则表达式是一种用于匹配字符串的规则，其基本格式为：{元字符} {量词}\n\n元字符： 用于匹配一个字符\n\n量词：用于修饰元字符匹配多少次，既元字符重复的次数\n\n| 元字符 | 描述                                                         |\n| ------ | ------------------------------------------------------------ |\n| ^ 、$  | 开始\\结束                                                    |\n| \\w     | 字母数字下划线                                               |\n| \\W     | \\w 的补集，既非字母数字下划线                                |\n| \\d     | 数字                                                         |\n| \\D     | \\d 的补集，既非数字                                          |\n| \\s     | 空白字符，空格、\\t、\\n                                       |\n| \\S     | \\s的补集, 既非空白字符                                       |\n| \\t     | 制表符                                                       |\n| \\n     | 换行符                                                       |\n| .      | 非换行符                                                     |\n| [...]  | 字符组                                                       |\n| [^...] | 字符组的补集                                                 |\n| ()     | 分组，将多个元字符作为一组当成一个元字符，方便量词同时修饰多个元字符 |\n| \\|     | 或                                                           |\n\n\n\n| 量词    | 描述    |\n| ------- | ------- |\n| ？      | 0或1次  |\n| +       | 1或多次 |\n| *       | 0或多次 |\n| ｛n｝   | n次     |\n| ｛n,｝  | 至少n次 |\n| ｛n,m｝ | n~m 次  |\n\n### 七、练习\n\n1、输入一个用户名判断此用户名在当前Linux 主机系统是否存在，如存在则显示该用户名的用户ID号，否则输出\"不存在\"\n\n2、统计某个目录下(及其子目录下)后缀为.txt 的文件个数\n\n\n\n\n\n","slug":"shell-tutorial","published":1,"updated":"2023-12-09T12:17:20.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpy20kxl0003kksi4cnxgse2","content":"<h3 id=\"一、变量\"><a href=\"#一、变量\" class=\"headerlink\" title=\"一、变量\"></a>一、变量</h3><h4 id=\"1、变量分类\"><a href=\"#1、变量分类\" class=\"headerlink\" title=\"1、变量分类\"></a>1、变量分类</h4><ol>\n<li><p>环境变量： 系统环境变量定义，如：PATH</p>\n</li>\n<li><p>全局变量： shell 脚本文件定义的全局性变量</p>\n</li>\n<li><p>局部变量： shell 脚本定义的局部性变量</p>\n<p>在 <em>函数</em> 章节将具体介绍这几种变量的使用</p>\n</li>\n</ol>\n<h4 id=\"2、变量的类型\"><a href=\"#2、变量的类型\" class=\"headerlink\" title=\"2、变量的类型\"></a>2、变量的类型</h4><p>shell 中变量类型都是string</p>\n<h4 id=\"3、变量定义以及取值\"><a href=\"#3、变量定义以及取值\" class=\"headerlink\" title=\"3、变量定义以及取值\"></a>3、变量定义以及取值</h4><p>定义： 变量名&#x3D;变量值</p>\n<p><strong>变量名只能是英文字符或者数字或者下划线‘_’ ， 且不能是数字开头</strong></p>\n<p>取值：$变量名 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">name=liuheng <span class=\"comment\">#定义变量，‘=’ 前后不能有空格</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"variable\">$name</span>   <span class=\"comment\">#变量取值</span></span></span><br><span class=\"line\">liuheng</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、命令替代\"><a href=\"#4、命令替代\" class=\"headerlink\" title=\"4、命令替代\"></a>4、命令替代</h4><p>将命令的输出结果存到变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量名=`命令`  或者  变量名=$(命令)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">now=`<span class=\"built_in\">date</span>`   <span class=\"comment\">#获取date 命令值保存在now 变量</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"variable\">$now</span>    <span class=\"comment\">#从变量取值</span></span></span><br><span class=\"line\">2021年09月27日 16:48:41</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">now2=$(<span class=\"built_in\">date</span>) <span class=\"comment\">#获取date 命令值保存在now 变量</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"variable\">$now2</span></span></span><br><span class=\"line\">2021年09月27日 16:50:04</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、运算式替代\"><a href=\"#5、运算式替代\" class=\"headerlink\" title=\"5、运算式替代\"></a>5、运算式替代</h4><p>将运算表达式结果保存到变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量名=$[运算表达式]   或者  变量名=$((运算表达式))</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">one=1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">two=2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">sum</span>=$[one+two]  \t<span class=\"comment\">#计算 one+two 的结果保存在sum 变量</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"variable\">$sum</span></span></span><br><span class=\"line\">3</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sum2=$((one+two)) <span class=\"comment\">#计算 one+two 的结果保存在sum 变量</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"variable\">$sum2</span></span></span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、条件测试\"><a href=\"#二、条件测试\" class=\"headerlink\" title=\"二、条件测试\"></a>二、条件测试</h3><p>[  判断条件  ] 或者  test   判断条件   </p>\n<p><strong>注意判断条件与’[‘ 、’]’   之间有空格， 判断条件可以是多个，通过逻辑运算符连接</strong> </p>\n<h4 id=\"1、数值判断\"><a href=\"#1、数值判断\" class=\"headerlink\" title=\"1、数值判断\"></a>1、数值判断</h4><p>eq: 等于</p>\n<p>gt:大于</p>\n<p>ge:大于等于</p>\n<p>lt:小于</p>\n<p>le:小于等于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">数值判断 方式1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">var=2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">test</span> <span class=\"variable\">$var</span> -eq 2     <span class=\"comment\">#判断var 是否等于2</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?     \t\t <span class=\"comment\">#返回上条命令的执行结果, 0:true 1:false</span></span></span><br><span class=\"line\">0\t\t\t\t\t#true</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">test</span> <span class=\"variable\">$var</span> -eq 3     <span class=\"comment\">#判断var 是否等于3</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span>\t\t\t</span><br><span class=\"line\">1\t\t\t\t\t#false</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">数值判断 方式2(比较常用) 下文以方式2的格式举例</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$var</span> -eq 2 ]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">0</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$var</span> -eq 3 ]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、字符串判断\"><a href=\"#2、字符串判断\" class=\"headerlink\" title=\"2、字符串判断\"></a>2、字符串判断</h4><p>&#x3D; ： 等于 </p>\n<p>!&#x3D;  ：不等于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">字符串判断</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">str=liuheng</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$str</span> = liuheng ] <span class=\"comment\"># 判断变量str是否是liuheng， 注意‘=’ 前后有空格</span></span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">0</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$str</span> = liuheng1 ]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、文件判断\"><a href=\"#3、文件判断\" class=\"headerlink\" title=\"3、文件判断\"></a>3、文件判断</h4><p>-d  是否是目录</p>\n<p>-f  是否是一般文件文件</p>\n<p>… 其他</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">文件判断</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">dir</span>=/e/Program_Files/OpenVPN/config</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ -d <span class=\"variable\">$dir</span> ] <span class=\"comment\">#判断dir 是否是个目录</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、逻辑运算-与或非\"><a href=\"#4、逻辑运算-与或非\" class=\"headerlink\" title=\"4、逻辑运算:与或非\"></a>4、逻辑运算:与或非</h4><p>-a :  与，and</p>\n<p>-o:  或， or</p>\n<p>!: 非</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">多个条件组合</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">and</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">name=liuheng</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">age=18</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$age</span> -eq 18 -a <span class=\"variable\">$name</span> = liuheng ] <span class=\"comment\">#条件1 and 条件2 同时满足为true</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">0</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$age</span> -eq 18 -a <span class=\"variable\">$name</span> = lucas ]   <span class=\"comment\">#条件1 and 条件2 同时满足为true</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">or</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$age</span> -eq 8 -o <span class=\"variable\">$name</span> = liuheng ] <span class=\"comment\">#条件1 or 条件2 满足其一为true</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、分支结构\"><a href=\"#三、分支结构\" class=\"headerlink\" title=\"三、分支结构\"></a>三、分支结构</h3><h4 id=\"1、if-结构\"><a href=\"#1、if-结构\" class=\"headerlink\" title=\"1、if  结构\"></a>1、if  结构</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">if</span> .. <span class=\"keyword\">elif</span> .. <span class=\"keyword\">else</span> .. <span class=\"keyword\">fi</span></span></span><br><span class=\"line\">if [ 条件1 ]</span><br><span class=\"line\">then</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">elif [ 条件2 ]</span><br><span class=\"line\">then</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">else</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">if</span> .. <span class=\"keyword\">fi</span></span></span><br><span class=\"line\">if [ 条件 ]</span><br><span class=\"line\">then</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span></span></span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">if</span> .. <span class=\"keyword\">else</span> .. <span class=\"keyword\">fi</span></span> </span><br><span class=\"line\">if [ 条件 ]</span><br><span class=\"line\">then</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">else</span><br><span class=\"line\">    #do something</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">if</span>/elif 与 <span class=\"keyword\">then</span> 可以在同一行，但需要‘;’ 分开</span></span><br><span class=\"line\">if [ 条件 ]; then</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">if</span>、<span class=\"keyword\">elif</span>、<span class=\"keyword\">then</span>、<span class=\"keyword\">else</span>、<span class=\"keyword\">fi</span> 是独立的语句需换行或者‘;’ 分割开，否则shel 解释器不能识别</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">下面的<span class=\"keyword\">for</span>、<span class=\"keyword\">do</span>, <span class=\"keyword\">while</span>、<span class=\"keyword\">do</span> 同理</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 if.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">! /bin/bash</span></span><br><span class=\"line\">age=18</span><br><span class=\"line\">if [ $age -ge 18 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">\techo &quot;年龄大于等于18&quot;</span><br><span class=\"line\">elif [ $age -ge 12 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">\techo &quot;年龄大于等于12小于18&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &quot;年龄小于12&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh if.sh</span></span><br><span class=\"line\">年龄大于等于18</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、case-结构\"><a href=\"#2、case-结构\" class=\"headerlink\" title=\"2、case 结构\"></a>2、case 结构</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case $变量名 in</span><br><span class=\"line\">&quot;情况1&quot;)</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果变量的值等于情况1，则执行</span></span><br><span class=\"line\">;; #结束情况1 的逻辑 等价c语言的break</span><br><span class=\"line\">&quot;情况2&quot;)</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果变量的值等于情况2，则执行</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果变量的值都不是以上的值，则执行此程序</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">esac</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">等价于<span class=\"keyword\">if</span>结构</span></span><br><span class=\"line\">if [ 情况1满足 ]; then</span><br><span class=\"line\">elif [ 情况2满足 ]; then</span><br><span class=\"line\">else</span><br><span class=\"line\">\t其他情况</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 case.sh</span></span><br><span class=\"line\">var=1</span><br><span class=\"line\">case $var in</span><br><span class=\"line\">1) #$var等于1</span><br><span class=\"line\">\techo &quot;情况1&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"><span class=\"meta prompt_\">2)#</span><span class=\"language-bash\">var等于2</span></span><br><span class=\"line\">\techo &quot;情况2&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">*)#其他 </span><br><span class=\"line\">    echo &quot;其他&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">esac</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh case.sh</span></span><br><span class=\"line\">情况1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、循环结构\"><a href=\"#四、循环结构\" class=\"headerlink\" title=\"四、循环结构\"></a>四、循环结构</h3><h4 id=\"1、for-结构\"><a href=\"#1、for-结构\" class=\"headerlink\" title=\"1、for  结构\"></a>1、for  结构</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for item in list </span><br><span class=\"line\">do</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">for</span> 与 <span class=\"keyword\">do</span> 同一行 需要<span class=\"string\">&#x27;;&#x27;</span> 分割</span></span><br><span class=\"line\">for item in list; do </span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 for.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">遍历当前目录文件</span></span><br><span class=\"line\">for file in `ls`</span><br><span class=\"line\">do </span><br><span class=\"line\">    if [ -f $file ];then</span><br><span class=\"line\">\t\techo $file is a file</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh for.sh</span></span><br><span class=\"line\">case.sh is a file</span><br><span class=\"line\">for.sh is a file</span><br><span class=\"line\">if.sh is a file</span><br><span class=\"line\">while.sh is a file</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、while-结构\"><a href=\"#2、while-结构\" class=\"headerlink\" title=\"2、while  结构\"></a>2、while  结构</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while 条件</span><br><span class=\"line\">do</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">while</span> 与<span class=\"keyword\">do</span> 同一行需要‘;’ 分割</span></span><br><span class=\"line\">while 条件; do</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 while.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">从10~1 输出</span></span><br><span class=\"line\">var=10</span><br><span class=\"line\">while [ $var -gt 0 ]</span><br><span class=\"line\">do </span><br><span class=\"line\">\techo $var</span><br><span class=\"line\">\tvar=$[var-1]\t#计算var-1赋值给var，见上文运算式替代语法, 等价于C 语言的var--</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh while.sh</span></span><br><span class=\"line\">10</span><br><span class=\"line\">9</span><br><span class=\"line\">8</span><br><span class=\"line\">7</span><br><span class=\"line\">6</span><br><span class=\"line\">5</span><br><span class=\"line\">4</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、函数\"><a href=\"#五、函数\" class=\"headerlink\" title=\"五、函数\"></a>五、函数</h3><h4 id=\"1、函数定义\"><a href=\"#1、函数定义\" class=\"headerlink\" title=\"1、函数定义\"></a>1、函数定义</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数名() &#123;</span><br><span class=\"line\">\t函数体</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 func.sh</span></span><br><span class=\"line\">show() &#123;</span><br><span class=\"line\">   echo &quot;hello&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、函数调用\"><a href=\"#2、函数调用\" class=\"headerlink\" title=\"2、函数调用\"></a>2、函数调用</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数名 [参数列表可选]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子func.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">函数定义</span></span><br><span class=\"line\">show() &#123;</span><br><span class=\"line\">    echo &quot;hello&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">函数调用</span></span><br><span class=\"line\">show</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh fun.sh</span></span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1、参数使用\"><a href=\"#2-1、参数使用\" class=\"headerlink\" title=\"2.1、参数使用\"></a>2.1、参数使用</h5><p>​\t$1、$2..、$n： 分别代表第n个参数，$@ : 代表参数列表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 arg.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">函数定义</span></span><br><span class=\"line\">show() &#123;</span><br><span class=\"line\">  echo &quot;第一个参数：$1&quot;</span><br><span class=\"line\">  echo &quot;第二个参数：$2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">函数调用</span></span><br><span class=\"line\">show a b</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh arg.sh</span></span><br><span class=\"line\">第一个参数：a</span><br><span class=\"line\">第二个参数：b</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-、返回值\"><a href=\"#2-2-、返回值\" class=\"headerlink\" title=\"2.2 、返回值\"></a>2.2 、返回值</h5><p>函数(命令)的执行结果可分为2部分：状态值与输出值<br>状态值：<br>    通过return 返回状态值，若函数体没有return, 状态值为函数最后一条指令的执行状态，通过$? 可以获取执行状态值;<br>输出值：<br>    通过输出函数echo 提供输出， 通过 $(函数名) 获取输出值; </p>\n<p>函数的执行与命令的执行类似，可认为函数就是一个自定义的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">函数中使用<span class=\"built_in\">return</span>返回函数值时，通过$? 来捕获函数返回值</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 return.sh</span></span><br><span class=\"line\">isdir() &#123;</span><br><span class=\"line\">  if [ -d $1 ]; then</span><br><span class=\"line\">     return 0 #返回true</span><br><span class=\"line\">  else</span><br><span class=\"line\">     return 1 #返回false</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isdir `pwd`</span><br><span class=\"line\">echo $? #$? 保存有函数调用的返回值</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">判断函数返回值</span></span><br><span class=\"line\">if isdir `pwd`; then echo &#x27;is dir!&#x27;; fi</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh return.sh</span></span><br><span class=\"line\">0</span><br><span class=\"line\">is dir!</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">函数中使用<span class=\"built_in\">echo</span>返回函数值时，通过 $(func_name arg1 arg2...) 来捕获函数返回值,同上文命令替代语法</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 return2.sh</span></span><br><span class=\"line\">isdir() &#123;</span><br><span class=\"line\">  if [ -d $1 ]; then</span><br><span class=\"line\">       echo 0</span><br><span class=\"line\">  else</span><br><span class=\"line\">       echo 1</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">isdir `<span class=\"built_in\">pwd</span>`</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $? <span class=\"comment\">#$? 保存的是isdir 执行是否出错，与isdir echo 的值无关</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">ret=$(isdir `pwd`)</span><br><span class=\"line\">echo &quot;ret:$ret&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh return2.sh</span></span><br><span class=\"line\">0</span><br><span class=\"line\">ret:0</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3、变量使用\"><a href=\"#2-3、变量使用\" class=\"headerlink\" title=\"2.3、变量使用\"></a>2.3、变量使用</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 gvar.sh</span></span><br><span class=\"line\">gvar=1\t\t #全局变量,作用于整个文件</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">定义函数</span></span><br><span class=\"line\">addOne() &#123;</span><br><span class=\"line\">  gvar=$[gvar+1]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">操作 gvar 递增到5</span></span><br><span class=\"line\">while [ $gvar -lt 5 ]</span><br><span class=\"line\">do</span><br><span class=\"line\">    addOne</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">输出gvar</span></span><br><span class=\"line\">echo &quot;gvar=$gvar&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh gvar.sh</span></span><br><span class=\"line\">gvar=5</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 localvar.sh</span></span><br><span class=\"line\">gvar=1</span><br><span class=\"line\">addOne() &#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">通过<span class=\"built_in\">local</span> 标记gvar 变量为局部变量,此变量的作用范围就在此函数，与上文定义的全局变量为2个不同的变量</span></span><br><span class=\"line\">  local gvar=$[gvar+1] #计算全局变量gvar+1的值 赋值给局部变量gvar</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">gvar=$[gvar+1] <span class=\"comment\">#无local标记的话gvar 表示的是全局变量</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo &quot;gvar=$gvar&quot;  #打印的是全局变量gvar 值没有被修改</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh localvar.sh</span></span><br><span class=\"line\">gvar=1\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"六、其他\"><a href=\"#六、其他\" class=\"headerlink\" title=\"六、其他\"></a>六、其他</h3><h4 id=\"1、脚本传参数\"><a href=\"#1、脚本传参数\" class=\"headerlink\" title=\"1、脚本传参数\"></a>1、脚本传参数</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh  脚本  参数1 参数2 #与函数传参相似</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 arg.sh</span></span><br><span class=\"line\">echo $1</span><br><span class=\"line\">echo $2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh arg.sh 12 34</span></span><br><span class=\"line\">12</span><br><span class=\"line\">34</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、输入、输出\"><a href=\"#2、输入、输出\" class=\"headerlink\" title=\"2、输入、输出\"></a>2、输入、输出</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 input.sh</span></span><br><span class=\"line\">read -p &quot;请输入：&quot; name  #将输入保存到name, -p 打印提示</span><br><span class=\"line\">echo &quot;hello $name&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh input.sh</span></span><br><span class=\"line\">请输入：liuheng</span><br><span class=\"line\">hello liuheng</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、隐藏输出以及错误\"><a href=\"#3、隐藏输出以及错误\" class=\"headerlink\" title=\"3、隐藏输出以及错误\"></a>3、隐藏输出以及错误</h4><p>命令 &gt; &#x2F;dev&#x2F;null  2&gt;&amp;1 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ping2  &gt; /dev/null <span class=\"comment\">#标准输出重定向到 /dev/null</span></span></span><br><span class=\"line\">bash: ping2: command not found</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ping2 &gt; /dev/null 2&gt;&amp;1 <span class=\"comment\">#标准输出以及标准错误重定向 /dev/null</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">/dev/null linux下的黑洞，类似于垃圾桶，任何东西到里面都会被粉碎</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">重定向</span> </span><br><span class=\"line\">1 标准输出</span><br><span class=\"line\">2 错误输出</span><br><span class=\"line\">&amp; 表示等同于的意思， 2&gt;&amp;1 表示2的重定向等同于1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、原子处理命令集\"><a href=\"#4、原子处理命令集\" class=\"headerlink\" title=\"4、原子处理命令集\"></a>4、原子处理命令集</h4><p>(命令1；命令2) ,  使用() 原子执行命令集合, 类似 &amp;&amp;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">pwd</span></span></span><br><span class=\"line\">/e/Program_Files/OpenVPN/config</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">(<span class=\"built_in\">cd</span> ..;<span class=\"built_in\">ls</span>)  <span class=\"comment\">#cd 没有改变当前目录(与 &amp;&amp; 连接不同)，ls 列出的是 cd .. 后的文件</span></span> </span><br><span class=\"line\">bin/  config/  doc/  icon.ico  log/  sample-config/  Uninstall.exe*</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">pwd</span></span></span><br><span class=\"line\">/e/Program_Files/OpenVPN/config</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">&amp;&amp; 连接命令</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">pwd</span></span></span><br><span class=\"line\">/e/Program_Files/OpenVPN/config</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> .. &amp;&amp; <span class=\"built_in\">ls</span> <span class=\"comment\">#cd 改变了当前目录</span></span></span><br><span class=\"line\">bin/  config/  doc/  icon.ico  log/  sample-config/  Uninstall.exe*</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">pwd</span></span></span><br><span class=\"line\">/e/Program_Files/OpenVPN  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、文本处理工具-awk-sed\"><a href=\"#5、文本处理工具-awk-sed\" class=\"headerlink\" title=\"5、文本处理工具 awk &amp; sed\"></a>5、文本处理工具 awk &amp; sed</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk 参数 &#x27;脚本&#x27; 目标文件     #常用方式</span><br><span class=\"line\">其中脚本格式：条件1 ｛操作1｝ 条件2 ｛操作2｝...</span><br><span class=\"line\">条件部分可以没有默认为true, &#123;操作&#125; 等价于 true &#123;操作&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">脚本也可以是一个文件，如果脚本部分很复杂的话，可以把脚本写到文件，通过 -f 指定脚本文件</span><br><span class=\"line\">awk 参数 -f 脚本文件 目标文件  #不常用</span><br><span class=\"line\"></span><br><span class=\"line\">awk 命令功能相当于下列伪代码：</span><br><span class=\"line\">for line in file:\t\t\t</span><br><span class=\"line\">\tfor field  in line\t\t#默认按空格分割行，-F 可以指定列分割符号，按指定的字符对行分割成多列 </span><br><span class=\"line\">       脚本代码\t\t\t\t # if 条件1 操作1  if 条件2  操作2 ...</span><br><span class=\"line\">       $0 : 当前行，$1 当前行的第1列 $2 当前行的第2列 ...</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子： 遍历/etc/passwd文件的每一行， 对每行数据以“:”做分割并输出分割后的第一列</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">awk -F: <span class=\"string\">&#x27;&#123; print $1 &#125;&#x27;</span> /etc/passwd</span> </span><br><span class=\"line\">root</span><br><span class=\"line\">lucas</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 统计root的进程数</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">END 为特殊条件表示文件处理完时</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">按行处理ps 的输出，统计用户为root的进程个数</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ps -ef|awk <span class=\"string\">&#x27;$1=&quot;root&quot; &#123;count=count+1&#125; END &#123;print count&#125;&#x27;</span></span></span><br><span class=\"line\">170</span><br><span class=\"line\"></span><br><span class=\"line\">sed 参数 &#x27;脚本&#x27;  目标文件</span><br><span class=\"line\">其中脚本部分格式：&#123;匹配目标(位置)&#125;&#123;操作&#125;&#123;操作内容&#125;</span><br><span class=\"line\">操作：增(a/i)、删(d)、改(s)</span><br><span class=\"line\">eg: </span><br><span class=\"line\">    sed &#x27;2a append line&#x27;  test.txt #在第2行后追加内容</span><br><span class=\"line\">    sed &#x27;2i insert line&#x27;  test.txt #在第2行前插入内容</span><br><span class=\"line\">    sed &#x27;1d&#x27; test.txt              #删除第一行</span><br><span class=\"line\">    sed &#x27;1,3d&#x27; test.txt            #删除第1~3行</span><br><span class=\"line\">    sed &#x27;s/print/echo/g&#x27; text.txt  #替换print--&gt;echo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6、正则表达式\"><a href=\"#6、正则表达式\" class=\"headerlink\" title=\"6、正则表达式\"></a>6、正则表达式</h4><p>正则表达式是一种用于匹配字符串的规则，其基本格式为：{元字符} {量词}</p>\n<p>元字符： 用于匹配一个字符</p>\n<p>量词：用于修饰元字符匹配多少次，既元字符重复的次数</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^ 、$</td>\n<td>开始\\结束</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>字母数字下划线</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>\\w 的补集，既非字母数字下划线</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>数字</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>\\d 的补集，既非数字</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>空白字符，空格、\\t、\\n</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>\\s的补集, 既非空白字符</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行符</td>\n</tr>\n<tr>\n<td>.</td>\n<td>非换行符</td>\n</tr>\n<tr>\n<td>[…]</td>\n<td>字符组</td>\n</tr>\n<tr>\n<td>[^…]</td>\n<td>字符组的补集</td>\n</tr>\n<tr>\n<td>()</td>\n<td>分组，将多个元字符作为一组当成一个元字符，方便量词同时修饰多个元字符</td>\n</tr>\n<tr>\n<td>|</td>\n<td>或</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>量词</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>？</td>\n<td>0或1次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>1或多次</td>\n</tr>\n<tr>\n<td>*</td>\n<td>0或多次</td>\n</tr>\n<tr>\n<td>｛n｝</td>\n<td>n次</td>\n</tr>\n<tr>\n<td>｛n,｝</td>\n<td>至少n次</td>\n</tr>\n<tr>\n<td>｛n,m｝</td>\n<td>n~m 次</td>\n</tr>\n</tbody></table>\n<h3 id=\"七、练习\"><a href=\"#七、练习\" class=\"headerlink\" title=\"七、练习\"></a>七、练习</h3><p>1、输入一个用户名判断此用户名在当前Linux 主机系统是否存在，如存在则显示该用户名的用户ID号，否则输出”不存在”</p>\n<p>2、统计某个目录下(及其子目录下)后缀为.txt 的文件个数</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、变量\"><a href=\"#一、变量\" class=\"headerlink\" title=\"一、变量\"></a>一、变量</h3><h4 id=\"1、变量分类\"><a href=\"#1、变量分类\" class=\"headerlink\" title=\"1、变量分类\"></a>1、变量分类</h4><ol>\n<li><p>环境变量： 系统环境变量定义，如：PATH</p>\n</li>\n<li><p>全局变量： shell 脚本文件定义的全局性变量</p>\n</li>\n<li><p>局部变量： shell 脚本定义的局部性变量</p>\n<p>在 <em>函数</em> 章节将具体介绍这几种变量的使用</p>\n</li>\n</ol>\n<h4 id=\"2、变量的类型\"><a href=\"#2、变量的类型\" class=\"headerlink\" title=\"2、变量的类型\"></a>2、变量的类型</h4><p>shell 中变量类型都是string</p>\n<h4 id=\"3、变量定义以及取值\"><a href=\"#3、变量定义以及取值\" class=\"headerlink\" title=\"3、变量定义以及取值\"></a>3、变量定义以及取值</h4><p>定义： 变量名&#x3D;变量值</p>\n<p><strong>变量名只能是英文字符或者数字或者下划线‘_’ ， 且不能是数字开头</strong></p>\n<p>取值：$变量名 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">name=liuheng <span class=\"comment\">#定义变量，‘=’ 前后不能有空格</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"variable\">$name</span>   <span class=\"comment\">#变量取值</span></span></span><br><span class=\"line\">liuheng</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、命令替代\"><a href=\"#4、命令替代\" class=\"headerlink\" title=\"4、命令替代\"></a>4、命令替代</h4><p>将命令的输出结果存到变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量名=`命令`  或者  变量名=$(命令)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">now=`<span class=\"built_in\">date</span>`   <span class=\"comment\">#获取date 命令值保存在now 变量</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"variable\">$now</span>    <span class=\"comment\">#从变量取值</span></span></span><br><span class=\"line\">2021年09月27日 16:48:41</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">now2=$(<span class=\"built_in\">date</span>) <span class=\"comment\">#获取date 命令值保存在now 变量</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"variable\">$now2</span></span></span><br><span class=\"line\">2021年09月27日 16:50:04</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、运算式替代\"><a href=\"#5、运算式替代\" class=\"headerlink\" title=\"5、运算式替代\"></a>5、运算式替代</h4><p>将运算表达式结果保存到变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量名=$[运算表达式]   或者  变量名=$((运算表达式))</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">one=1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">two=2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">sum</span>=$[one+two]  \t<span class=\"comment\">#计算 one+two 的结果保存在sum 变量</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"variable\">$sum</span></span></span><br><span class=\"line\">3</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sum2=$((one+two)) <span class=\"comment\">#计算 one+two 的结果保存在sum 变量</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"variable\">$sum2</span></span></span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、条件测试\"><a href=\"#二、条件测试\" class=\"headerlink\" title=\"二、条件测试\"></a>二、条件测试</h3><p>[  判断条件  ] 或者  test   判断条件   </p>\n<p><strong>注意判断条件与’[‘ 、’]’   之间有空格， 判断条件可以是多个，通过逻辑运算符连接</strong> </p>\n<h4 id=\"1、数值判断\"><a href=\"#1、数值判断\" class=\"headerlink\" title=\"1、数值判断\"></a>1、数值判断</h4><p>eq: 等于</p>\n<p>gt:大于</p>\n<p>ge:大于等于</p>\n<p>lt:小于</p>\n<p>le:小于等于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">数值判断 方式1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">var=2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">test</span> <span class=\"variable\">$var</span> -eq 2     <span class=\"comment\">#判断var 是否等于2</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?     \t\t <span class=\"comment\">#返回上条命令的执行结果, 0:true 1:false</span></span></span><br><span class=\"line\">0\t\t\t\t\t#true</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">test</span> <span class=\"variable\">$var</span> -eq 3     <span class=\"comment\">#判断var 是否等于3</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span>\t\t\t</span><br><span class=\"line\">1\t\t\t\t\t#false</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">数值判断 方式2(比较常用) 下文以方式2的格式举例</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$var</span> -eq 2 ]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">0</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$var</span> -eq 3 ]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、字符串判断\"><a href=\"#2、字符串判断\" class=\"headerlink\" title=\"2、字符串判断\"></a>2、字符串判断</h4><p>&#x3D; ： 等于 </p>\n<p>!&#x3D;  ：不等于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">字符串判断</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">str=liuheng</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$str</span> = liuheng ] <span class=\"comment\"># 判断变量str是否是liuheng， 注意‘=’ 前后有空格</span></span>  </span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">0</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$str</span> = liuheng1 ]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、文件判断\"><a href=\"#3、文件判断\" class=\"headerlink\" title=\"3、文件判断\"></a>3、文件判断</h4><p>-d  是否是目录</p>\n<p>-f  是否是一般文件文件</p>\n<p>… 其他</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">文件判断</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">dir</span>=/e/Program_Files/OpenVPN/config</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ -d <span class=\"variable\">$dir</span> ] <span class=\"comment\">#判断dir 是否是个目录</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、逻辑运算-与或非\"><a href=\"#4、逻辑运算-与或非\" class=\"headerlink\" title=\"4、逻辑运算:与或非\"></a>4、逻辑运算:与或非</h4><p>-a :  与，and</p>\n<p>-o:  或， or</p>\n<p>!: 非</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">多个条件组合</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">and</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">name=liuheng</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">age=18</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$age</span> -eq 18 -a <span class=\"variable\">$name</span> = liuheng ] <span class=\"comment\">#条件1 and 条件2 同时满足为true</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">0</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$age</span> -eq 18 -a <span class=\"variable\">$name</span> = lucas ]   <span class=\"comment\">#条件1 and 条件2 同时满足为true</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">or</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">[ <span class=\"variable\">$age</span> -eq 8 -o <span class=\"variable\">$name</span> = liuheng ] <span class=\"comment\">#条件1 or 条件2 满足其一为true</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $?</span></span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、分支结构\"><a href=\"#三、分支结构\" class=\"headerlink\" title=\"三、分支结构\"></a>三、分支结构</h3><h4 id=\"1、if-结构\"><a href=\"#1、if-结构\" class=\"headerlink\" title=\"1、if  结构\"></a>1、if  结构</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">if</span> .. <span class=\"keyword\">elif</span> .. <span class=\"keyword\">else</span> .. <span class=\"keyword\">fi</span></span></span><br><span class=\"line\">if [ 条件1 ]</span><br><span class=\"line\">then</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">elif [ 条件2 ]</span><br><span class=\"line\">then</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">else</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">if</span> .. <span class=\"keyword\">fi</span></span></span><br><span class=\"line\">if [ 条件 ]</span><br><span class=\"line\">then</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span></span></span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">if</span> .. <span class=\"keyword\">else</span> .. <span class=\"keyword\">fi</span></span> </span><br><span class=\"line\">if [ 条件 ]</span><br><span class=\"line\">then</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">else</span><br><span class=\"line\">    #do something</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">if</span>/elif 与 <span class=\"keyword\">then</span> 可以在同一行，但需要‘;’ 分开</span></span><br><span class=\"line\">if [ 条件 ]; then</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">if</span>、<span class=\"keyword\">elif</span>、<span class=\"keyword\">then</span>、<span class=\"keyword\">else</span>、<span class=\"keyword\">fi</span> 是独立的语句需换行或者‘;’ 分割开，否则shel 解释器不能识别</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">下面的<span class=\"keyword\">for</span>、<span class=\"keyword\">do</span>, <span class=\"keyword\">while</span>、<span class=\"keyword\">do</span> 同理</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 if.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">! /bin/bash</span></span><br><span class=\"line\">age=18</span><br><span class=\"line\">if [ $age -ge 18 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">\techo &quot;年龄大于等于18&quot;</span><br><span class=\"line\">elif [ $age -ge 12 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">\techo &quot;年龄大于等于12小于18&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &quot;年龄小于12&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh if.sh</span></span><br><span class=\"line\">年龄大于等于18</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、case-结构\"><a href=\"#2、case-结构\" class=\"headerlink\" title=\"2、case 结构\"></a>2、case 结构</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case $变量名 in</span><br><span class=\"line\">&quot;情况1&quot;)</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果变量的值等于情况1，则执行</span></span><br><span class=\"line\">;; #结束情况1 的逻辑 等价c语言的break</span><br><span class=\"line\">&quot;情况2&quot;)</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果变量的值等于情况2，则执行</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果变量的值都不是以上的值，则执行此程序</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">esac</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">等价于<span class=\"keyword\">if</span>结构</span></span><br><span class=\"line\">if [ 情况1满足 ]; then</span><br><span class=\"line\">elif [ 情况2满足 ]; then</span><br><span class=\"line\">else</span><br><span class=\"line\">\t其他情况</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 case.sh</span></span><br><span class=\"line\">var=1</span><br><span class=\"line\">case $var in</span><br><span class=\"line\">1) #$var等于1</span><br><span class=\"line\">\techo &quot;情况1&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"><span class=\"meta prompt_\">2)#</span><span class=\"language-bash\">var等于2</span></span><br><span class=\"line\">\techo &quot;情况2&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">*)#其他 </span><br><span class=\"line\">    echo &quot;其他&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">esac</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh case.sh</span></span><br><span class=\"line\">情况1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、循环结构\"><a href=\"#四、循环结构\" class=\"headerlink\" title=\"四、循环结构\"></a>四、循环结构</h3><h4 id=\"1、for-结构\"><a href=\"#1、for-结构\" class=\"headerlink\" title=\"1、for  结构\"></a>1、for  结构</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for item in list </span><br><span class=\"line\">do</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">for</span> 与 <span class=\"keyword\">do</span> 同一行 需要<span class=\"string\">&#x27;;&#x27;</span> 分割</span></span><br><span class=\"line\">for item in list; do </span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 for.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">遍历当前目录文件</span></span><br><span class=\"line\">for file in `ls`</span><br><span class=\"line\">do </span><br><span class=\"line\">    if [ -f $file ];then</span><br><span class=\"line\">\t\techo $file is a file</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh for.sh</span></span><br><span class=\"line\">case.sh is a file</span><br><span class=\"line\">for.sh is a file</span><br><span class=\"line\">if.sh is a file</span><br><span class=\"line\">while.sh is a file</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、while-结构\"><a href=\"#2、while-结构\" class=\"headerlink\" title=\"2、while  结构\"></a>2、while  结构</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while 条件</span><br><span class=\"line\">do</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"keyword\">while</span> 与<span class=\"keyword\">do</span> 同一行需要‘;’ 分割</span></span><br><span class=\"line\">while 条件; do</span><br><span class=\"line\"><span class=\"meta prompt_\">\t#</span><span class=\"language-bash\"><span class=\"keyword\">do</span> something</span></span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 while.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">从10~1 输出</span></span><br><span class=\"line\">var=10</span><br><span class=\"line\">while [ $var -gt 0 ]</span><br><span class=\"line\">do </span><br><span class=\"line\">\techo $var</span><br><span class=\"line\">\tvar=$[var-1]\t#计算var-1赋值给var，见上文运算式替代语法, 等价于C 语言的var--</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh while.sh</span></span><br><span class=\"line\">10</span><br><span class=\"line\">9</span><br><span class=\"line\">8</span><br><span class=\"line\">7</span><br><span class=\"line\">6</span><br><span class=\"line\">5</span><br><span class=\"line\">4</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、函数\"><a href=\"#五、函数\" class=\"headerlink\" title=\"五、函数\"></a>五、函数</h3><h4 id=\"1、函数定义\"><a href=\"#1、函数定义\" class=\"headerlink\" title=\"1、函数定义\"></a>1、函数定义</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数名() &#123;</span><br><span class=\"line\">\t函数体</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 func.sh</span></span><br><span class=\"line\">show() &#123;</span><br><span class=\"line\">   echo &quot;hello&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、函数调用\"><a href=\"#2、函数调用\" class=\"headerlink\" title=\"2、函数调用\"></a>2、函数调用</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数名 [参数列表可选]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子func.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">函数定义</span></span><br><span class=\"line\">show() &#123;</span><br><span class=\"line\">    echo &quot;hello&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">函数调用</span></span><br><span class=\"line\">show</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh fun.sh</span></span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1、参数使用\"><a href=\"#2-1、参数使用\" class=\"headerlink\" title=\"2.1、参数使用\"></a>2.1、参数使用</h5><p>​\t$1、$2..、$n： 分别代表第n个参数，$@ : 代表参数列表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 arg.sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">函数定义</span></span><br><span class=\"line\">show() &#123;</span><br><span class=\"line\">  echo &quot;第一个参数：$1&quot;</span><br><span class=\"line\">  echo &quot;第二个参数：$2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">函数调用</span></span><br><span class=\"line\">show a b</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh arg.sh</span></span><br><span class=\"line\">第一个参数：a</span><br><span class=\"line\">第二个参数：b</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-、返回值\"><a href=\"#2-2-、返回值\" class=\"headerlink\" title=\"2.2 、返回值\"></a>2.2 、返回值</h5><p>函数(命令)的执行结果可分为2部分：状态值与输出值<br>状态值：<br>    通过return 返回状态值，若函数体没有return, 状态值为函数最后一条指令的执行状态，通过$? 可以获取执行状态值;<br>输出值：<br>    通过输出函数echo 提供输出， 通过 $(函数名) 获取输出值; </p>\n<p>函数的执行与命令的执行类似，可认为函数就是一个自定义的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">函数中使用<span class=\"built_in\">return</span>返回函数值时，通过$? 来捕获函数返回值</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 return.sh</span></span><br><span class=\"line\">isdir() &#123;</span><br><span class=\"line\">  if [ -d $1 ]; then</span><br><span class=\"line\">     return 0 #返回true</span><br><span class=\"line\">  else</span><br><span class=\"line\">     return 1 #返回false</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">isdir `pwd`</span><br><span class=\"line\">echo $? #$? 保存有函数调用的返回值</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">判断函数返回值</span></span><br><span class=\"line\">if isdir `pwd`; then echo &#x27;is dir!&#x27;; fi</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh return.sh</span></span><br><span class=\"line\">0</span><br><span class=\"line\">is dir!</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">函数中使用<span class=\"built_in\">echo</span>返回函数值时，通过 $(func_name arg1 arg2...) 来捕获函数返回值,同上文命令替代语法</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 return2.sh</span></span><br><span class=\"line\">isdir() &#123;</span><br><span class=\"line\">  if [ -d $1 ]; then</span><br><span class=\"line\">       echo 0</span><br><span class=\"line\">  else</span><br><span class=\"line\">       echo 1</span><br><span class=\"line\">  fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">isdir `<span class=\"built_in\">pwd</span>`</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $? <span class=\"comment\">#$? 保存的是isdir 执行是否出错，与isdir echo 的值无关</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">ret=$(isdir `pwd`)</span><br><span class=\"line\">echo &quot;ret:$ret&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh return2.sh</span></span><br><span class=\"line\">0</span><br><span class=\"line\">ret:0</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3、变量使用\"><a href=\"#2-3、变量使用\" class=\"headerlink\" title=\"2.3、变量使用\"></a>2.3、变量使用</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 gvar.sh</span></span><br><span class=\"line\">gvar=1\t\t #全局变量,作用于整个文件</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">定义函数</span></span><br><span class=\"line\">addOne() &#123;</span><br><span class=\"line\">  gvar=$[gvar+1]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">操作 gvar 递增到5</span></span><br><span class=\"line\">while [ $gvar -lt 5 ]</span><br><span class=\"line\">do</span><br><span class=\"line\">    addOne</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">输出gvar</span></span><br><span class=\"line\">echo &quot;gvar=$gvar&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh gvar.sh</span></span><br><span class=\"line\">gvar=5</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 localvar.sh</span></span><br><span class=\"line\">gvar=1</span><br><span class=\"line\">addOne() &#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">通过<span class=\"built_in\">local</span> 标记gvar 变量为局部变量,此变量的作用范围就在此函数，与上文定义的全局变量为2个不同的变量</span></span><br><span class=\"line\">  local gvar=$[gvar+1] #计算全局变量gvar+1的值 赋值给局部变量gvar</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">gvar=$[gvar+1] <span class=\"comment\">#无local标记的话gvar 表示的是全局变量</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo &quot;gvar=$gvar&quot;  #打印的是全局变量gvar 值没有被修改</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh localvar.sh</span></span><br><span class=\"line\">gvar=1\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"六、其他\"><a href=\"#六、其他\" class=\"headerlink\" title=\"六、其他\"></a>六、其他</h3><h4 id=\"1、脚本传参数\"><a href=\"#1、脚本传参数\" class=\"headerlink\" title=\"1、脚本传参数\"></a>1、脚本传参数</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh  脚本  参数1 参数2 #与函数传参相似</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 arg.sh</span></span><br><span class=\"line\">echo $1</span><br><span class=\"line\">echo $2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh arg.sh 12 34</span></span><br><span class=\"line\">12</span><br><span class=\"line\">34</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、输入、输出\"><a href=\"#2、输入、输出\" class=\"headerlink\" title=\"2、输入、输出\"></a>2、输入、输出</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 input.sh</span></span><br><span class=\"line\">read -p &quot;请输入：&quot; name  #将输入保存到name, -p 打印提示</span><br><span class=\"line\">echo &quot;hello $name&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sh input.sh</span></span><br><span class=\"line\">请输入：liuheng</span><br><span class=\"line\">hello liuheng</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、隐藏输出以及错误\"><a href=\"#3、隐藏输出以及错误\" class=\"headerlink\" title=\"3、隐藏输出以及错误\"></a>3、隐藏输出以及错误</h4><p>命令 &gt; &#x2F;dev&#x2F;null  2&gt;&amp;1 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ping2  &gt; /dev/null <span class=\"comment\">#标准输出重定向到 /dev/null</span></span></span><br><span class=\"line\">bash: ping2: command not found</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ping2 &gt; /dev/null 2&gt;&amp;1 <span class=\"comment\">#标准输出以及标准错误重定向 /dev/null</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">/dev/null linux下的黑洞，类似于垃圾桶，任何东西到里面都会被粉碎</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">重定向</span> </span><br><span class=\"line\">1 标准输出</span><br><span class=\"line\">2 错误输出</span><br><span class=\"line\">&amp; 表示等同于的意思， 2&gt;&amp;1 表示2的重定向等同于1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、原子处理命令集\"><a href=\"#4、原子处理命令集\" class=\"headerlink\" title=\"4、原子处理命令集\"></a>4、原子处理命令集</h4><p>(命令1；命令2) ,  使用() 原子执行命令集合, 类似 &amp;&amp;</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">pwd</span></span></span><br><span class=\"line\">/e/Program_Files/OpenVPN/config</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">(<span class=\"built_in\">cd</span> ..;<span class=\"built_in\">ls</span>)  <span class=\"comment\">#cd 没有改变当前目录(与 &amp;&amp; 连接不同)，ls 列出的是 cd .. 后的文件</span></span> </span><br><span class=\"line\">bin/  config/  doc/  icon.ico  log/  sample-config/  Uninstall.exe*</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">pwd</span></span></span><br><span class=\"line\">/e/Program_Files/OpenVPN/config</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">&amp;&amp; 连接命令</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">pwd</span></span></span><br><span class=\"line\">/e/Program_Files/OpenVPN/config</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> .. &amp;&amp; <span class=\"built_in\">ls</span> <span class=\"comment\">#cd 改变了当前目录</span></span></span><br><span class=\"line\">bin/  config/  doc/  icon.ico  log/  sample-config/  Uninstall.exe*</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">pwd</span></span></span><br><span class=\"line\">/e/Program_Files/OpenVPN  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、文本处理工具-awk-sed\"><a href=\"#5、文本处理工具-awk-sed\" class=\"headerlink\" title=\"5、文本处理工具 awk &amp; sed\"></a>5、文本处理工具 awk &amp; sed</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk 参数 &#x27;脚本&#x27; 目标文件     #常用方式</span><br><span class=\"line\">其中脚本格式：条件1 ｛操作1｝ 条件2 ｛操作2｝...</span><br><span class=\"line\">条件部分可以没有默认为true, &#123;操作&#125; 等价于 true &#123;操作&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">脚本也可以是一个文件，如果脚本部分很复杂的话，可以把脚本写到文件，通过 -f 指定脚本文件</span><br><span class=\"line\">awk 参数 -f 脚本文件 目标文件  #不常用</span><br><span class=\"line\"></span><br><span class=\"line\">awk 命令功能相当于下列伪代码：</span><br><span class=\"line\">for line in file:\t\t\t</span><br><span class=\"line\">\tfor field  in line\t\t#默认按空格分割行，-F 可以指定列分割符号，按指定的字符对行分割成多列 </span><br><span class=\"line\">       脚本代码\t\t\t\t # if 条件1 操作1  if 条件2  操作2 ...</span><br><span class=\"line\">       $0 : 当前行，$1 当前行的第1列 $2 当前行的第2列 ...</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子： 遍历/etc/passwd文件的每一行， 对每行数据以“:”做分割并输出分割后的第一列</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">awk -F: <span class=\"string\">&#x27;&#123; print $1 &#125;&#x27;</span> /etc/passwd</span> </span><br><span class=\"line\">root</span><br><span class=\"line\">lucas</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例子 统计root的进程数</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">END 为特殊条件表示文件处理完时</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">按行处理ps 的输出，统计用户为root的进程个数</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ps -ef|awk <span class=\"string\">&#x27;$1=&quot;root&quot; &#123;count=count+1&#125; END &#123;print count&#125;&#x27;</span></span></span><br><span class=\"line\">170</span><br><span class=\"line\"></span><br><span class=\"line\">sed 参数 &#x27;脚本&#x27;  目标文件</span><br><span class=\"line\">其中脚本部分格式：&#123;匹配目标(位置)&#125;&#123;操作&#125;&#123;操作内容&#125;</span><br><span class=\"line\">操作：增(a/i)、删(d)、改(s)</span><br><span class=\"line\">eg: </span><br><span class=\"line\">    sed &#x27;2a append line&#x27;  test.txt #在第2行后追加内容</span><br><span class=\"line\">    sed &#x27;2i insert line&#x27;  test.txt #在第2行前插入内容</span><br><span class=\"line\">    sed &#x27;1d&#x27; test.txt              #删除第一行</span><br><span class=\"line\">    sed &#x27;1,3d&#x27; test.txt            #删除第1~3行</span><br><span class=\"line\">    sed &#x27;s/print/echo/g&#x27; text.txt  #替换print--&gt;echo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6、正则表达式\"><a href=\"#6、正则表达式\" class=\"headerlink\" title=\"6、正则表达式\"></a>6、正则表达式</h4><p>正则表达式是一种用于匹配字符串的规则，其基本格式为：{元字符} {量词}</p>\n<p>元字符： 用于匹配一个字符</p>\n<p>量词：用于修饰元字符匹配多少次，既元字符重复的次数</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^ 、$</td>\n<td>开始\\结束</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>字母数字下划线</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>\\w 的补集，既非字母数字下划线</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>数字</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>\\d 的补集，既非数字</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>空白字符，空格、\\t、\\n</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>\\s的补集, 既非空白字符</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行符</td>\n</tr>\n<tr>\n<td>.</td>\n<td>非换行符</td>\n</tr>\n<tr>\n<td>[…]</td>\n<td>字符组</td>\n</tr>\n<tr>\n<td>[^…]</td>\n<td>字符组的补集</td>\n</tr>\n<tr>\n<td>()</td>\n<td>分组，将多个元字符作为一组当成一个元字符，方便量词同时修饰多个元字符</td>\n</tr>\n<tr>\n<td>|</td>\n<td>或</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>量词</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>？</td>\n<td>0或1次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>1或多次</td>\n</tr>\n<tr>\n<td>*</td>\n<td>0或多次</td>\n</tr>\n<tr>\n<td>｛n｝</td>\n<td>n次</td>\n</tr>\n<tr>\n<td>｛n,｝</td>\n<td>至少n次</td>\n</tr>\n<tr>\n<td>｛n,m｝</td>\n<td>n~m 次</td>\n</tr>\n</tbody></table>\n<h3 id=\"七、练习\"><a href=\"#七、练习\" class=\"headerlink\" title=\"七、练习\"></a>七、练习</h3><p>1、输入一个用户名判断此用户名在当前Linux 主机系统是否存在，如存在则显示该用户名的用户ID号，否则输出”不存在”</p>\n<p>2、统计某个目录下(及其子目录下)后缀为.txt 的文件个数</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clpy20kxb0000kksi7vqhad8u","tag_id":"clpy20kxj0002kksi05bwca2p","_id":"clpy20kxp0006kksieszf00vk"},{"post_id":"clpy20kxb0000kksi7vqhad8u","tag_id":"clpy20kxo0004kksi3frj7y5s","_id":"clpy20kxp0007kksigqhag0h6"},{"post_id":"clpy20kxg0001kksi6zoe2f3u","tag_id":"clpy20kxp0005kksicmfjc6fk","_id":"clpy20kxs000akksifppwfgwb"},{"post_id":"clpy20kxg0001kksi6zoe2f3u","tag_id":"clpy20kxo0004kksi3frj7y5s","_id":"clpy20kxs000bkksihm0taq0b"},{"post_id":"clpy20kxl0003kksi4cnxgse2","tag_id":"clpy20kxo0004kksi3frj7y5s","_id":"clpy20kxt000dkksih6da2fk0"},{"post_id":"clpy20kxl0003kksi4cnxgse2","tag_id":"clpy20kxs000ckksi813hdlyz","_id":"clpy20kxt000ekksi7vv423ay"}],"Tag":[{"name":"python","_id":"clpy20kxj0002kksi05bwca2p"},{"name":"linux","_id":"clpy20kxo0004kksi3frj7y5s"},{"name":"docker","_id":"clpy20kxp0005kksicmfjc6fk"},{"name":"shell","_id":"clpy20kxs000ckksi813hdlyz"}]}}